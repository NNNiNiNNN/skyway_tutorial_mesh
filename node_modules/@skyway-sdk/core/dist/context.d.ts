import model from '@skyway-sdk/model';
import { RtcApiClient } from '@skyway-sdk/rtc-api-client';
import { SkyWayAuthToken } from '@skyway-sdk/token';
import { SkyWayChannelImpl } from './channel';
import { SkyWayConfig, SkyWayConfigOptions } from './config';
import { SkyWayPlugin } from './plugin/interface/plugin';
export declare class SkyWayContext {
    authToken: SkyWayAuthToken;
    /**
     * @description {japanese} Contextの作成
     */
    static Create(authTokenString: string, configOptions?: Partial<SkyWayConfigOptions>): Promise<SkyWayContext>;
    /**@internal */
    plugins: SkyWayPlugin[];
    private _unknownPlugin;
    readonly appId: string;
    /**@private */
    readonly _api: RtcApiClient;
    disposed: boolean;
    private _authTokenString;
    /**seconds */
    private _reminderSec;
    private tokenUpdateReminderTimer;
    private tokenExpiredTimer;
    private _events;
    readonly onTokenUpdateReminder: import("@skyway-sdk/common").Event<void>;
    readonly onTokenExpired: import("@skyway-sdk/common").Event<void>;
    /**@private */
    readonly _onTokenUpdated: import("@skyway-sdk/common").Event<string>;
    /**@private */
    readonly _onDisposed: import("@skyway-sdk/common").Event<void>;
    /**@private */
    constructor(
    /**@private */
    api: RtcApiClient, authToken: SkyWayAuthToken);
    get authTokenString(): string;
    get config(): SkyWayConfig;
    /**@private */
    get _received(): number;
    private _setTokenExpireTimer;
    updateAuthToken(token: string): void;
    registerPlugin(plugin: SkyWayPlugin): void;
    /**@private */
    _createRemoteMember(channel: SkyWayChannelImpl, memberDto: model.Member): import(".").RemoteMemberImpl;
    dispose(): void;
}
//# sourceMappingURL=context.d.ts.map