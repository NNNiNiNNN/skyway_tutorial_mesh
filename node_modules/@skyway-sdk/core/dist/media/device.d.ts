import { Event } from '@skyway-sdk/common';
import { DataStreamOptions, LocalDataStream } from '..';
import { LocalAudioStream } from './stream/local/audio';
import { LocalVideoStream } from './stream/local/video';
export declare class MediaDeviceManager {
    /**
     * @description {japanese} 一度参照した種類のデバイスの状態が変化した時に発火するイベント
     */
    readonly onDeviceChange: Event<{
        device: MediaDevice;
        state: 'added' | 'removed';
    }>;
    private _devices;
    /**@private */
    constructor();
    private _enumerateDevicesArray;
    private _enumerateDevicesWithAuth;
    /**
     * @description {japanese} デバイスの一覧を取得する
     */
    enumerateDevices(): Promise<MediaDevice[]>;
    /**
     * @description {japanese} 映像入力デバイスの一覧を取得する
     */
    enumerateInputVideoDevices(): Promise<MediaDevice[]>;
    /**
     * @description {japanese} 音声入力デバイスの一覧を取得する
     */
    enumerateInputAudioDevices(): Promise<MediaDevice[]>;
    /**
     * @description {japanese} 音声出力デバイスの一覧を取得する
     */
    enumerateOutputAudioDevices(): Promise<MediaDevice[]>;
    /**
     * @description {japanese} CameraのVideoStreamを作成する
     */
    createCameraVideoStream(options?: VideoMediaTrackConstraints): Promise<LocalVideoStream>;
    /**
     * @description {japanese} マイクのAudioStreamを作成する
     */
    createMicrophoneAudioStream(options?: AudioMediaTrackConstraints): Promise<LocalAudioStream>;
    /**
     * @description {japanese} DataStreamを作成する
     */
    createDataStream(options?: DataStreamOptions): Promise<LocalDataStream>;
    /**
     * @description {japanese} CameraのVideoStreamとマイクのAudioStreamを作成する
     */
    createMicrophoneAudioAndCameraStream({ audio, video, }?: {
        audio?: AudioMediaTrackConstraints;
        video?: VideoMediaTrackConstraints;
    }): Promise<{
        audio: LocalAudioStream;
        video: LocalVideoStream;
    }>;
}
export declare const SkyWayMediaDevices: MediaDeviceManager;
export declare class MediaDevice {
    id: string;
    label: string;
    kind: MediaDeviceKind;
    /**@private */
    constructor(info: MediaDeviceInfo);
}
export declare type AudioMediaTrackConstraints = Omit<MediaTrackConstraints, 'aspectRatio' | 'facingMode' | 'frameRate' | 'height' | 'width'>;
export declare type VideoMediaTrackConstraints = Omit<MediaTrackConstraints, 'autoGainControl' | 'channelCount' | 'echoCancellation' | 'latency' | 'noiseSuppression' | 'sampleRate' | 'sampleSize' | 'suppressLocalAudioPlayback' | 'volume'>;
//# sourceMappingURL=device.d.ts.map