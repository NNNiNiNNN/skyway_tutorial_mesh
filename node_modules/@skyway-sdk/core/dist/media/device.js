"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaDevice = exports.SkyWayMediaDevices = exports.MediaDeviceManager = void 0;
const common_1 = require("@skyway-sdk/common");
const __1 = require("..");
const audio_1 = require("./stream/local/audio");
const video_1 = require("./stream/local/video");
class MediaDeviceManager {
    /**@private */
    constructor() {
        /**
         * @description {japanese} 一度参照した種類のデバイスの状態が変化した時に発火するイベント
         */
        this.onDeviceChange = new common_1.Event();
        this._devices = [];
        if (!(navigator === null || navigator === void 0 ? void 0 : navigator.mediaDevices)) {
            throw new common_1.SkyWayError({
                type: 'forbidden',
                message: 'mediaDevices not exist. maybe not under https or localhost or 127.0.0.1 environment',
            });
        }
        navigator.mediaDevices.addEventListener('devicechange', () => __awaiter(this, void 0, void 0, function* () {
            const devices = yield this._enumerateDevicesArray();
            const removed = [];
            this._devices.forEach((prev) => {
                if (!devices.map((d) => d.id).includes(prev.id)) {
                    removed.push(prev);
                }
            });
            const added = [];
            devices
                .map((d) => d.id)
                .forEach((next) => {
                if (!this._devices.map((d) => d.id).includes(next)) {
                    added.push(devices.find((d) => d.id === next));
                }
            });
            removed.forEach((device) => {
                this.onDeviceChange.emit({ state: 'removed', device });
            });
            added.forEach((device) => {
                this.onDeviceChange.emit({ state: 'added', device });
            });
            this._devices = devices;
        }));
    }
    _enumerateDevicesArray() {
        return __awaiter(this, void 0, void 0, function* () {
            const devices = yield navigator.mediaDevices.enumerateDevices();
            return devices
                .map((d) => new MediaDevice(d))
                .filter((d) => d.id.length > 0);
        });
    }
    _enumerateDevicesWithAuth({ video, audio } = {
        audio: true,
        video: true,
    }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (video || audio) {
                yield navigator.mediaDevices.getUserMedia({ video, audio });
            }
            this._devices = yield this._enumerateDevicesArray();
            return this._devices;
        });
    }
    /**
     * @description {japanese} デバイスの一覧を取得する
     */
    enumerateDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            const devices = yield this._enumerateDevicesWithAuth();
            return devices;
        });
    }
    /**
     * @description {japanese} 映像入力デバイスの一覧を取得する
     */
    enumerateInputVideoDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            const devices = yield this._enumerateDevicesWithAuth({ video: true });
            return devices.filter((d) => d.kind === 'videoinput');
        });
    }
    /**
     * @description {japanese} 音声入力デバイスの一覧を取得する
     */
    enumerateInputAudioDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            const devices = yield this._enumerateDevicesWithAuth({ audio: true });
            return devices.filter((d) => d.kind === 'audioinput');
        });
    }
    /**
     * @description {japanese} 音声出力デバイスの一覧を取得する
     */
    enumerateOutputAudioDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            const devices = yield this._enumerateDevicesWithAuth({ audio: true });
            return devices.filter((d) => d.kind === 'audiooutput');
        });
    }
    /**
     * @description {japanese} CameraのVideoStreamを作成する
     */
    createCameraVideoStream(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const [track] = (yield navigator.mediaDevices.getUserMedia({ video: options })).getTracks();
            return new video_1.LocalVideoStream('camera', track);
        });
    }
    /**
     * @description {japanese} マイクのAudioStreamを作成する
     */
    createMicrophoneAudioStream(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const [track] = (yield navigator.mediaDevices.getUserMedia({ audio: options })).getTracks();
            return new audio_1.LocalAudioStream('microphone', track);
        });
    }
    /**
     * @description {japanese} DataStreamを作成する
     */
    createDataStream(options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return new __1.LocalDataStream(options);
        });
    }
    /**
     * @description {japanese} CameraのVideoStreamとマイクのAudioStreamを作成する
     */
    createMicrophoneAudioAndCameraStream({ audio, video, } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const stream = yield navigator.mediaDevices.getUserMedia({
                audio: audio !== null && audio !== void 0 ? audio : true,
                video: video !== null && video !== void 0 ? video : true,
            });
            const [audioTrack] = stream.getAudioTracks();
            const [videoTrack] = stream.getVideoTracks();
            return {
                audio: new audio_1.LocalAudioStream('microphone', audioTrack),
                video: new video_1.LocalVideoStream('camera', videoTrack),
            };
        });
    }
}
exports.MediaDeviceManager = MediaDeviceManager;
exports.SkyWayMediaDevices = new MediaDeviceManager();
class MediaDevice {
    /**@private */
    constructor(info) {
        this.id = info.deviceId;
        this.label = info.label;
        this.kind = info.kind;
    }
}
exports.MediaDevice = MediaDevice;
//# sourceMappingURL=device.js.map