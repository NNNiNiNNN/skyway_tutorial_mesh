"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SkyWayContext = void 0;
const common_1 = require("@skyway-sdk/common");
const rtc_api_client_1 = require("@skyway-sdk/rtc-api-client");
const token_1 = require("@skyway-sdk/token");
const config_1 = require("./config");
const plugin_1 = require("./plugin/internal/person/plugin");
const plugin_2 = require("./plugin/internal/unknown/plugin");
const log = new common_1.Logger('packages/core/src/context.ts');
class SkyWayContext {
    /**@private */
    constructor(
    /**@private */
    api, authToken) {
        this.authToken = authToken;
        /**@internal */
        this.plugins = [];
        this._unknownPlugin = new plugin_2.UnknownPlugin();
        this.disposed = false;
        /**seconds */
        this._reminderSec = config_1.SkyWayConfig.get.token.updateReminderSec;
        this._events = new common_1.Events();
        this.onTokenUpdateReminder = this._events.make();
        this.onTokenExpired = this._events.make();
        /**@private */
        this._onTokenUpdated = this._events.make();
        /**@private */
        this._onDisposed = this._events.make();
        if (!authToken.tokenString) {
            throw new common_1.SkyWayError({
                type: 'parameterMissing',
                message: 'tokenString is required',
            });
        }
        this._authTokenString = authToken.tokenString;
        this.appId = this.authToken.scope.app.id;
        log.debug('SkyWayContext spawned', { appId: this.appId });
        this._setTokenExpireTimer();
        (0, plugin_1.registerPersonPlugin)(this);
        this._api = api;
        this._api.onFatalError.once(() => {
            log.error('onFatalError', { appId: this.appId });
            this.dispose();
        });
    }
    /**
     * @description {japanese} Contextの作成
     */
    static Create(authTokenString, configOptions = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const config = config_1.SkyWayConfig.initialize(configOptions);
            common_1.Logger.level = config.logLevel;
            const token = token_1.SkyWayAuthToken.Decode(authTokenString);
            log.debug('config', config);
            try {
                const api = yield rtc_api_client_1.RtcApiClient.Create({
                    appId: token.scope.app.id,
                    token: authTokenString,
                    logLevel: config.logLevel,
                    rtcApi: config.rtcApi,
                });
                return new SkyWayContext(api, token);
            }
            catch (error) {
                throw new common_1.SkyWayError({
                    type: 'internalError',
                    message: 'create api client failed',
                    payload: { error },
                });
            }
        });
    }
    get authTokenString() {
        return this._authTokenString;
    }
    get config() {
        return config_1.SkyWayConfig.get;
    }
    /**@private */
    get _received() {
        return this._api.received;
    }
    _setTokenExpireTimer() {
        // seconds
        const expiresInSec = this.authToken.exp - Date.now() / 1000;
        if (expiresInSec < 0) {
            throw new common_1.SkyWayError({
                type: 'invalidParameter',
                message: 'exp is invalid value',
            });
        }
        if (this.tokenUpdateReminderTimer) {
            clearTimeout(this.tokenUpdateReminderTimer);
        }
        const tokenExpireReminderTimeSec = expiresInSec - this._reminderSec;
        if (tokenExpireReminderTimeSec < 0) {
            throw new common_1.SkyWayError({
                type: 'invalidParameter',
                message: 'exp is less than the reminder value',
                payload: { expiresInSec, reminderSec: this._reminderSec },
            });
        }
        log.debug({ tokenExpireReminderTimeSec });
        this.tokenUpdateReminderTimer = setTimeout(() => {
            log.debug('tokenUpdateReminder', { appid: this.appId });
            this.onTokenUpdateReminder.emit();
        }, tokenExpireReminderTimeSec * 1000);
        if (this.tokenExpiredTimer) {
            clearTimeout(this.tokenExpiredTimer);
        }
        log.debug({ expiresInSec });
        this.tokenExpiredTimer = setTimeout(() => {
            log.debug('tokenExpired', { appid: this.appId });
            this.onTokenExpired.emit();
        }, expiresInSec * 1000);
    }
    updateAuthToken(token) {
        this._authTokenString = token;
        this.authToken = token_1.SkyWayAuthToken.Decode(this._authTokenString);
        if (this.authToken.scope.app.id !== this.appId) {
            throw new common_1.SkyWayError({
                type: 'invalidParameter',
                message: 'appId does not match',
            });
        }
        this._api.updateAuthToken(token);
        // for plugin
        this._onTokenUpdated.emit(token);
        // todo update messageService token
        this._setTokenExpireTimer();
    }
    registerPlugin(plugin) {
        if (this.plugins.find((p) => p.subtype === plugin.subtype)) {
            return;
        }
        plugin._attachContext(this);
        this.plugins.push(plugin);
    }
    /**@private */
    _createRemoteMember(channel, memberDto) {
        const exist = channel._getMember(memberDto.id);
        if (exist) {
            return exist;
        }
        log.debug('createRemoteMember', { memberDto });
        // todo fix
        memberDto.type = memberDto.type.toLowerCase();
        memberDto.subtype = memberDto.subtype.toLowerCase();
        let plugin = this.plugins.find((p) => p.subtype === memberDto.subtype);
        if (!plugin) {
            plugin = this._unknownPlugin;
            log.warn(`unknown remote member type. plugin not exist. should install ${memberDto.subtype} plugin`, { memberDto });
        }
        const member = plugin._createRemoteMember(channel, memberDto);
        return member;
    }
    dispose() {
        if (this.disposed) {
            return;
        }
        this.disposed = true;
        log.debug('disposed', { appid: this.appId });
        this._onDisposed.emit();
        this._events.dispose();
        this._api.close();
    }
}
exports.SkyWayContext = SkyWayContext;
//# sourceMappingURL=context.js.map