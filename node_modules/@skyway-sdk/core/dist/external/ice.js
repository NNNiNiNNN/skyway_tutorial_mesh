"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IceManager = void 0;
const common_1 = require("@skyway-sdk/common");
const log = new common_1.Logger('packages/core/src/external/ice.ts');
/**@internal */
class IceManager {
    constructor(domain, version, secure, turnPolicy) {
        this.domain = domain;
        this.version = version;
        this.secure = secure;
        this.turnPolicy = turnPolicy;
        this.stunServers = [];
        this._endpoint = `http${this.secure ? 's' : ''}://${this.domain}/v${this.version}`;
        this.http = new common_1.HttpClient(this._endpoint);
    }
    setupIceServers(jwt, memberId, ttl) {
        return __awaiter(this, void 0, void 0, function* () {
            const body = { memberId, ttl };
            const { turn, stun } = yield this.http.post(`/ice-params`, body, {
                headers: { authorization: `Bearer ${jwt}` },
            });
            log.debug('iceServer params', { turn, stun });
            if (turn) {
                this.turnServer = {
                    credential: turn.credential,
                    urls: `turn:${turn.domain}:${turn.port}`,
                    username: turn.username,
                };
            }
            this.stunServers = [{ urls: `stun:${stun.domain}:${stun.port}` }];
        });
    }
    get iceServers() {
        const iceServers = [...this.stunServers];
        if (this.turnPolicy !== 'disable' && this.turnServer) {
            iceServers.push(this.turnServer);
        }
        return iceServers;
    }
}
exports.IceManager = IceManager;
//# sourceMappingURL=ice.js.map