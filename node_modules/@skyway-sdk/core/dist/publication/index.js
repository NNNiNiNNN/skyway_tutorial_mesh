"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublicationImpl = void 0;
const common_1 = require("@skyway-sdk/common");
const common_2 = require("@skyway-sdk/common");
const config_1 = require("../config");
__exportStar(require("./factory"), exports);
const log = new common_1.Logger('packages/core/src/publication/index.ts');
/**@internal */
class PublicationImpl {
    constructor(args) {
        var _a, _b;
        this._status = 'created';
        this.onUnpublished = new common_2.Event();
        this.onSubscribed = new common_2.Event();
        this.onUnsubscribed = new common_2.Event();
        this.onSubscriptionChanged = new common_2.Event();
        this.onMetadataUpdated = new common_2.Event();
        /**@private */
        this._onEncodingsChanged = new common_2.Event();
        this.id = args.id;
        this._channel = args.channel;
        this.publisherId = args.publisherId;
        this.contentType = args.contentType;
        this._metadata = args.metadata;
        this.originId = args.origin;
        this.codecCapabilities = (_a = args.codecCapabilities) !== null && _a !== void 0 ? _a : [];
        this.encodings = (_b = args.encodings) !== null && _b !== void 0 ? _b : [];
        this.stream = args.stream;
        this._status = 'published';
        log.debug('publication spawned', this.toJSON());
    }
    get publisher() {
        return this._channel._getMember(this.publisherId);
    }
    get origin() {
        var _a;
        return this._channel._getPublication((_a = this.originId) !== null && _a !== void 0 ? _a : '');
    }
    get metadata() {
        return this._metadata;
    }
    get status() {
        return this._status;
    }
    get subscriptions() {
        return this._channel.subscriptions.filter((s) => s.publication.id === this.id);
    }
    /**@private */
    _updateMetadata(metadata) {
        this._metadata = metadata;
        this.onMetadataUpdated.emit(metadata);
    }
    /**@private */
    _unpublished() {
        this.onUnpublished.emit();
        this._status = 'canceled';
    }
    /**@private */
    _subscribed() {
        this.onSubscribed.emit();
        this.onSubscriptionChanged.emit();
    }
    /**@private */
    _unsubscribed() {
        this.onUnsubscribed.emit();
        this.onSubscriptionChanged.emit();
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            this._channel._unpublish(this.id).catch((e) => {
                throw e;
            });
            this.stream = undefined;
            yield this.onUnpublished.asPromise(config_1.SkyWayConfig.get.rtcApi.timeout);
        });
    }
    updateMetadata(metadata) {
        return __awaiter(this, void 0, void 0, function* () {
            this._channel._updatePublicationMetadata(this.id, metadata).catch((e) => {
                throw e;
            });
            yield this.onMetadataUpdated
                .watch((m) => m === metadata, config_1.SkyWayConfig.get.rtcApi.timeout)
                .catch((error) => {
                throw new common_2.SkyWayError({
                    type: 'timeout',
                    message: 'onMetadataUpdated',
                    payload: { error },
                });
            });
        });
    }
    updateEncodings(encodings) {
        this.encodings = encodings;
        this._onEncodingsChanged.emit(encodings);
    }
    /**@private */
    toJSON() {
        var _a;
        return {
            id: this.id,
            channelId: this._channel.id,
            publisherId: this.publisher.id,
            origin: (_a = this.origin) === null || _a === void 0 ? void 0 : _a.id,
            contentType: this.contentType,
            metadata: this.metadata,
            codecCapabilities: this.codecCapabilities,
            encodings: this.encodings,
        };
    }
}
exports.PublicationImpl = PublicationImpl;
//# sourceMappingURL=index.js.map