import { Event } from '@skyway-sdk/common';
import model from '@skyway-sdk/model';
import { SkyWayChannelImpl } from '../channel';
import { Codec, EncodingParameters } from '../media';
import { ContentType } from '../media/stream';
import { LocalStream } from '../media/stream/local';
import { Member } from '../member';
import { Subscription } from '../subscription';
export * from './factory';
export interface Publication<T extends LocalStream = LocalStream> {
    readonly id: string;
    readonly contentType: ContentType;
    metadata?: string;
    publisher: Member;
    readonly subscriptions: Subscription[];
    readonly origin?: Publication;
    readonly codecCapabilities: Codec[];
    readonly encodings: EncodingParameters[];
    /**
     * @description {japanese} publishしたstreamの実体。
     * ローカルで作られたPublicationでなければundefinedとなる
     */
    stream?: T;
    status: PublicationStatus;
    onUnpublished: Event<void>;
    onSubscribed: Event<void>;
    onUnsubscribed: Event<void>;
    onSubscriptionChanged: Event<void>;
    onMetadataUpdated: Event<string>;
    /**
     * @description {japanese} Metadataの更新
     */
    updateMetadata: (metadata: string) => Promise<void>;
    /**
     * @description {japanese} unpublishする
     */
    cancel: () => Promise<void>;
    /**
     * @description {japanese} Video|Audio Streamの場合、encoding設定を更新する
     */
    updateEncodings: (encodings: EncodingParameters[]) => void;
}
/**@internal */
export declare class PublicationImpl<T extends LocalStream = LocalStream> implements Publication {
    readonly id: string;
    readonly contentType: ContentType;
    publisherId: string;
    codecCapabilities: Codec[];
    encodings: EncodingParameters[];
    stream?: T;
    /**@private */
    readonly _channel: SkyWayChannelImpl;
    get publisher(): import("..").RemoteMemberImpl;
    originId?: string;
    get origin(): Publication | undefined;
    private _metadata?;
    get metadata(): string | undefined;
    private _status;
    get status(): PublicationStatus;
    readonly onUnpublished: Event<void>;
    readonly onSubscribed: Event<void>;
    readonly onUnsubscribed: Event<void>;
    readonly onSubscriptionChanged: Event<void>;
    readonly onMetadataUpdated: Event<string>;
    /**@private */
    readonly _onEncodingsChanged: Event<EncodingParameters[]>;
    constructor(args: {
        channel: SkyWayChannelImpl;
        id: string;
        publisherId: string;
        contentType: ContentType;
        metadata?: string;
        origin?: string;
        codecCapabilities?: Codec[];
        encodings?: EncodingParameters[];
        stream?: T;
    });
    get subscriptions(): Subscription[];
    /**@private */
    _updateMetadata(metadata: string): void;
    /**@private */
    _unpublished(): void;
    /**@private */
    _subscribed(): void;
    /**@private */
    _unsubscribed(): void;
    cancel(): Promise<void>;
    updateMetadata(metadata: string): Promise<void>;
    updateEncodings(encodings: EncodingParameters[]): void;
    /**@private */
    toJSON(): model.Publication;
}
export declare type PublicationStatus = 'created' | 'published' | 'canceled';
//# sourceMappingURL=index.d.ts.map