import { Event } from '@skyway-sdk/common';
import { Member } from '../../../..';
import { IceManager } from '../../../../external/ice';
import { Codec } from '../../../../media';
import { SubscriptionImpl } from '../../../../subscription';
import { P2PMessage, P2PMessenger } from './messenger';
import { Peer } from './peer';
export declare class Receiver extends Peer {
    readonly onStreamAdded: Event<{
        publicationId: string;
        stream: MediaStreamTrack | RTCDataChannel;
        codec: Codec;
    }>;
    private _publicationInfo;
    streams: {
        [publicationId: string]: {
            media: MediaStreamTrack | RTCDataChannel;
            codec: Codec;
            streamId: string;
            label: string;
        };
    };
    private _subscriptions;
    private readonly _promiseQueue;
    constructor(iceManager: IceManager, messenger: P2PMessenger, localPersonId: string, endpoint: Pick<Member, 'id' | 'name'>);
    get hasMedia(): boolean;
    close(): void;
    add(subscription: SubscriptionImpl): void;
    remove(subscriptionId: string): void;
    private _handleSenderProduce;
    private _handleSenderUnproduce;
    private sendAnswer;
}
export interface ReceiverAnswerMessage extends P2PMessage {
    type: 'p2pMessage';
    kind: 'receiverAnswerMessage';
    payload: {
        sdp: RTCSessionDescriptionInit;
    };
}
//# sourceMappingURL=receiver.d.ts.map