"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.P2PConnection = void 0;
const common_1 = require("@skyway-sdk/common");
const config_1 = require("../../../../config");
const factory_1 = require("../../../../media/stream/remote/factory");
const receiver_1 = require("./receiver");
const sender_1 = require("./sender");
const log = new common_1.Logger('packages/core/src/plugin/internal/person/connection/index.ts');
class P2PConnection {
    constructor(_iceManager, _messenger, channelId, localPersonId, remoteMember) {
        this._iceManager = _iceManager;
        this._messenger = _messenger;
        this.channelId = channelId;
        this.localPersonId = localPersonId;
        this.remoteMember = remoteMember;
        this.type = 'p2p';
        this.onDisconnect = new common_1.Event();
        this.onClose = new common_1.Event();
        this.closed = false;
        this.disconnected = false;
        this.sender = new sender_1.Sender(this._iceManager, this._messenger, this.localPersonId, this.remoteMember);
        this.receiver = new receiver_1.Receiver(this._iceManager, this._messenger, this.localPersonId, this.remoteMember);
        this.sender.onDisconnect.once(() => {
            this.disconnected = true;
            this.onDisconnect.emit();
        });
        this.receiver.onDisconnect.once(() => {
            this.disconnected = true;
            this.onDisconnect.emit();
        });
    }
    startPublishing(publication) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sender.add(publication);
        });
    }
    stopPublishing(publication) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sender.remove(publication.id);
            this._closeIfNeeded();
        });
    }
    startSubscribing(subscription) {
        return __awaiter(this, void 0, void 0, function* () {
            this.receiver.add(subscription);
            let streamInfo = this.receiver.streams[subscription.publication.id];
            if (!streamInfo) {
                yield this.receiver.onStreamAdded
                    .watch(({ publicationId }) => subscription.publication.id === publicationId, config_1.SkyWayConfig.get.rtcConfig.timeout)
                    .catch(() => {
                    throw new common_1.SkyWayError({
                        type: 'timeout',
                        message: 'onStreamAdded',
                    });
                });
                streamInfo = this.receiver.streams[subscription.publication.id];
            }
            const remoteStream = (0, factory_1.createRemoteStream)(streamInfo.streamId, streamInfo.label, streamInfo.media);
            subscription.codec = streamInfo.codec;
            subscription.stream = remoteStream;
        });
    }
    stopSubscribing(subscription) {
        return __awaiter(this, void 0, void 0, function* () {
            this.receiver.remove(subscription.id);
            this._closeIfNeeded();
        });
    }
    _closeIfNeeded() {
        if (this.sender.hasMedia || this.receiver.hasMedia)
            return;
        this.close();
    }
    getStats(content) {
        return __awaiter(this, void 0, void 0, function* () {
            const stream = content.stream;
            if (!stream) {
                throw new common_1.SkyWayError({
                    type: 'parameterMissing',
                    message: 'Subscription or Publication must has stream',
                });
            }
            if (stream.side === 'local') {
                if (stream.contentType === 'data') {
                    return this.sender.pc.getStats();
                }
                return this.sender.pc.getStats(stream.track);
            }
            else {
                if (stream.contentType === 'data') {
                    return this.receiver.pc.getStats();
                }
                return this.receiver.pc.getStats(stream.track);
            }
        });
    }
    close() {
        if (this.closed) {
            return;
        }
        this.closed = true;
        log.debug('closed', { endpointId: this.remoteMember.id });
        this.sender.close();
        this.receiver.close();
        this.onClose.emit();
    }
}
exports.P2PConnection = P2PConnection;
//# sourceMappingURL=index.js.map