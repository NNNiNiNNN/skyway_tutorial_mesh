import { Event } from '@skyway-sdk/common';
import { Member } from '../../../..';
import { IceManager } from '../../../../external/ice';
import { P2PMessage, P2PMessenger } from './messenger';
export declare abstract class Peer {
    private readonly _iceManager;
    protected readonly messenger: P2PMessenger;
    protected readonly localPersonId: string;
    protected readonly endpoint: Pick<Member, 'id' | 'name'>;
    readonly role: PeerRole;
    private _pendingCandidates;
    readonly pc: RTCPeerConnection;
    readonly onSignalingStateChanged: Event<RTCSignalingState>;
    readonly onConnectionStateChanged: Event<RTCIceConnectionState>;
    readonly onDisconnect: Event<void>;
    connected: boolean;
    disconnected: boolean;
    constructor(_iceManager: IceManager, messenger: P2PMessenger, localPersonId: string, endpoint: Pick<Member, 'id' | 'name'>, role: PeerRole);
    private setPeerConnectionListener;
    protected unSetPeerConnectionListener(): void;
    private _onICECandidate;
    private _onConnectionStateChange;
    handleCandidate(candidate: RTCIceCandidate): Promise<void>;
    resolveCandidates(): Promise<void>;
    protected waitForState: (state: RTCSignalingState, timeout?: number) => Promise<void>;
}
export declare type PeerRole = 'sender' | 'receiver';
export interface IceCandidateMessage extends P2PMessage {
    type: 'p2pMessage';
    kind: 'iceCandidateMessage';
    payload: {
        candidate: RTCIceCandidate;
        role: 'receiver' | 'sender';
    };
}
//# sourceMappingURL=peer.d.ts.map