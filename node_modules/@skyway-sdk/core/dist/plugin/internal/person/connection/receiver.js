"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Receiver = void 0;
const common_1 = require("@skyway-sdk/common");
const sdpTransform = __importStar(require("sdp-transform"));
const datachannel_1 = require("./datachannel");
const peer_1 = require("./peer");
const log = new common_1.Logger('packages/core/src/plugin/internal/person/connection/receiver.ts');
class Receiver extends peer_1.Peer {
    constructor(iceManager, messenger, localPersonId, endpoint) {
        super(iceManager, messenger, localPersonId, endpoint, 'receiver');
        this.onStreamAdded = new common_1.Event();
        this._publicationInfo = {};
        this.streams = {};
        this._subscriptions = {};
        this._promiseQueue = new common_1.PromiseQueue();
        this.messenger.onIndicated.add(({ src, data }) => __awaiter(this, void 0, void 0, function* () {
            if (!(src.id === endpoint.id && src.name === endpoint.name))
                return;
            const message = data;
            switch (message.kind) {
                case 'senderProduceMessage':
                    {
                        this._promiseQueue
                            .push(() => this._handleSenderProduce(message.payload))
                            .catch((err) => log.error('handle senderProduceMessage failed', {
                            localPersonId: this.localPersonId,
                            endpointId: this.endpoint.id,
                            err,
                        }));
                    }
                    break;
                case 'senderUnproduceMessage':
                    {
                        this._promiseQueue
                            .push(() => this._handleSenderUnproduce(message.payload))
                            .catch((err) => log.error('handle handleSenderUnproduce', {
                            localPersonId: this.localPersonId,
                            endpointId: this.endpoint.id,
                            err,
                        }));
                    }
                    break;
                case 'iceCandidateMessage':
                    {
                        const { role, candidate } = message.payload;
                        if (role === 'sender') {
                            this.handleCandidate(candidate).catch((err) => log.warn('handle iceCandidateMessage', {
                                localPersonId: this.localPersonId,
                                endpointId: this.endpoint.id,
                                err,
                            }));
                        }
                    }
                    break;
            }
        }));
        this.pc.ontrack = ({ track, transceiver }) => {
            if (!transceiver.mid) {
                throw new common_1.SkyWayError({
                    type: 'parameterMissing',
                    message: 'mid missing',
                });
            }
            const info = Object.values(this._publicationInfo).find((i) => { var _a; return ((_a = i.mid) === null || _a === void 0 ? void 0 : _a.toString()) === transceiver.mid; });
            if (!info) {
                log.warn('info not exist', {
                    localPersonId: this.localPersonId,
                    endpointId: this.endpoint.id,
                    publicationInfo: this._publicationInfo,
                    mid: transceiver.mid,
                });
                return;
            }
            const sdpObject = sdpTransform.parse(this.pc.remoteDescription.sdp);
            const media = sdpObject.media.find(
            // sdpTransformのmidは実際はnumber
            (m) => { var _a; return ((_a = m.mid) === null || _a === void 0 ? void 0 : _a.toString()) === transceiver.mid; });
            if (!media) {
                throw new common_1.SkyWayError({
                    type: 'notFound',
                    message: 'm-line not exist',
                });
            }
            const codecPT = media.payloads.split(' ')[0];
            const codecName = media.rtp.find((r) => r.payload.toString() === codecPT).codec;
            const mimeType = `${track.kind}/${codecName}`;
            const codec = { mimeType };
            this.streams[info.publicationId] = {
                media: track,
                codec,
                streamId: info.streamId,
                label: info.label,
            };
            log.debug('MediaStreamTrack added', info, track, codec);
            this.onStreamAdded.emit(Object.assign(Object.assign({}, info), { stream: track, codec }));
        };
        this.pc.ondatachannel = ({ channel }) => {
            const { publicationId, label, streamId } = datachannel_1.DataChannelNegotiationLabel.fromLabel(channel.label);
            const codec = { mimeType: 'datachannel' };
            this.streams[publicationId] = {
                media: channel,
                codec,
                label,
                streamId,
            };
            log.debug('DataChannel added', publicationId, channel, codec);
            this.onStreamAdded.emit({
                publicationId,
                stream: channel,
                codec,
            });
        };
    }
    get hasMedia() {
        if (Object.values(this.streams).length > 0) {
            return true;
        }
        return false;
    }
    close() {
        log.debug('close receiver', this.localPersonId, this.endpoint.id);
        this.unSetPeerConnectionListener();
        this.pc.close();
    }
    add(subscription) {
        this._subscriptions[subscription.id] = subscription;
    }
    remove(subscriptionId) {
        const subscription = this._subscriptions[subscriptionId];
        if (!subscription) {
            throw new common_1.SkyWayError({
                type: 'notFound',
                message: 'receiver not have subscription',
                payload: { subscriptionId },
            });
        }
        delete this._subscriptions[subscriptionId];
        const publicationId = subscription.publication.id;
        const stream = this.streams[publicationId];
        if (!stream) {
            throw new common_1.SkyWayError({
                type: 'notFound',
                message: 'stream not consumed',
                payload: { subscriptionId, publicationId },
            });
        }
        delete this.streams[publicationId];
    }
    _handleSenderProduce({ sdp, publicationId, info, }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.pc.signalingState === 'closed') {
                log.debug('pc already closed');
                return;
            }
            if (this.pc.signalingState !== 'stable') {
                if ((this.pc.signalingState === 'have-local-offer' &&
                    this.pc.remoteDescription) ||
                    this.pc.signalingState === 'have-remote-offer') {
                    log.warn('wait for be stable', {
                        localPersonId: this.localPersonId,
                        endpointId: this.endpoint.id,
                    });
                    yield this.waitForState('stable');
                    // retry
                    yield this._handleSenderProduce({
                        sdp,
                        publicationId,
                        info,
                    });
                    return;
                }
                log.warn('something wrong', {
                    localPersonId: this.localPersonId,
                    endpointId: this.endpoint.id,
                    signalingState: this.pc.signalingState,
                });
                return;
            }
            log.debug('handle info', info, Object.keys(this._publicationInfo));
            this._publicationInfo[info.publicationId] = info;
            yield this.sendAnswer(sdp);
            yield this.resolveCandidates();
        });
    }
    _handleSenderUnproduce({ sdp, publicationId, }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.pc.signalingState === 'closed') {
                return;
            }
            if (this.pc.signalingState !== 'stable') {
                if ((this.pc.signalingState === 'have-local-offer' &&
                    this.pc.remoteDescription) ||
                    this.pc.signalingState === 'have-remote-offer') {
                    log.warn('wait for be stable');
                    yield this.waitForState('stable');
                    // retry
                    yield this._handleSenderUnproduce({
                        sdp,
                        publicationId,
                    });
                    return;
                }
                return;
            }
            delete this._publicationInfo[publicationId];
            yield this.sendAnswer(sdp);
            yield this.resolveCandidates();
        });
    }
    sendAnswer(sdp) {
        return __awaiter(this, void 0, void 0, function* () {
            log.debug(`[receiver] start: _answer()`);
            yield this.pc.setRemoteDescription(sdp);
            const answer = yield this.pc.createAnswer();
            yield this.pc.setLocalDescription(answer);
            const message = {
                type: 'p2pMessage',
                kind: 'receiverAnswerMessage',
                payload: { sdp: this.pc.localDescription },
            };
            yield this.messenger.indicate(this.endpoint, message).catch((e) => log.error('failed to send answer', {
                localPersonId: this.localPersonId,
                endpointId: this.endpoint.id,
                e,
            }));
            log.debug(`[receiver] end: _answer()`);
        });
    }
}
exports.Receiver = Receiver;
//# sourceMappingURL=receiver.js.map