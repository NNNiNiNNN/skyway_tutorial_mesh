import { Event } from '@skyway-sdk/common';
import { Member } from '../../../..';
import { IceManager } from '../../../../external/ice';
import { Publication, PublicationImpl } from '../../../../publication';
import { Subscription, SubscriptionImpl } from '../../../../subscription';
import { SkyWayConnection } from '../../../interface/connection';
import { P2PMessenger } from './messenger';
import { Receiver } from './receiver';
import { Sender } from './sender';
export declare class P2PConnection implements SkyWayConnection {
    private readonly _iceManager;
    private readonly _messenger;
    readonly channelId: string;
    readonly localPersonId: string;
    readonly remoteMember: Pick<Member, 'id' | 'name'>;
    readonly type = "p2p";
    readonly onDisconnect: Event<void>;
    readonly onClose: Event<void>;
    closed: boolean;
    disconnected: boolean;
    readonly sender: Sender;
    readonly receiver: Receiver;
    constructor(_iceManager: IceManager, _messenger: P2PMessenger, channelId: string, localPersonId: string, remoteMember: Pick<Member, 'id' | 'name'>);
    startPublishing(publication: PublicationImpl): Promise<void>;
    stopPublishing(publication: Publication): Promise<void>;
    startSubscribing(subscription: SubscriptionImpl): Promise<void>;
    stopSubscribing(subscription: Subscription): Promise<void>;
    private _closeIfNeeded;
    getStats(content: Subscription | Publication): Promise<RTCStatsReport>;
    close(): void;
}
//# sourceMappingURL=index.d.ts.map