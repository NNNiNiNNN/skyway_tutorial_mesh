import { Event } from '@skyway-sdk/common';
import { MessageClient } from '@skyway-sdk/message-client';
import { MessageBase } from '../../../../external/messaging';
export declare class P2PMessenger {
    messaging: MessageClient;
    readonly onIndicated: Event<{
        src: {
            id: string;
            name?: string;
        };
        data: P2PMessage;
    }>;
    private indicateChunkedMessageBuffer;
    private indicateVersion;
    constructor(messaging: MessageClient);
    indicate: <T extends string>(target: {
        id: string;
        name?: string;
    }, message: P2PMessage & {
        kind: T;
    }) => Promise<void>;
}
declare const p2pMessageKinds: readonly ["senderProduceMessage", "senderUnproduceMessage", "receiverAnswerMessage", "iceCandidateMessage"];
export declare type P2PMessageKind = typeof p2pMessageKinds[number];
export interface P2PMessage extends MessageBase {
    type: 'p2pMessage';
    kind: P2PMessageKind;
    payload: any;
}
export {};
//# sourceMappingURL=messenger.d.ts.map