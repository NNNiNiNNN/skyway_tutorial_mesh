import { Event } from '@skyway-sdk/common';
import { SkyWayChannelImpl } from '../../../channel';
import { RemoteStream } from '../../../media/stream';
import { MemberImpl } from '../../../member';
import { Person } from '../../../member/person';
import { RemoteMember } from '../../../member/remoteMember';
import { Subscription } from '../../../subscription';
import { P2PConnection } from './connection';
import { PersonPlugin } from './plugin';
interface RemotePersonInterface {
    /**@description {japanese} この RemotePerson がPublicationをSubscribeしたとき */
    readonly onPublicationSubscribed: Event<{
        subscription: Subscription;
    }>;
    /**@description {japanese} この RemotePerson がPublicationをUnsubscribeしたとき */
    readonly onPublicationUnsubscribed: Event<{
        subscription: Subscription;
    }>;
    /**@description {japanese} この RemotePerson にPublicationをSubscribeさせる */
    subscribe: (publicationId: string) => Promise<{
        subscription: Subscription;
    }>;
    /**@description {japanese} この RemotePerson にPublicationをUnsubscribeさせる */
    unsubscribe: (subscriptionId: string) => Promise<void>;
}
export declare type RemotePerson = RemoteMember & Person & RemotePersonInterface;
/**@internal */
export declare class RemotePersonImpl extends MemberImpl implements RemotePerson {
    readonly type = "person";
    readonly subtype = "person";
    readonly side = "remote";
    readonly plugin: PersonPlugin;
    private _connections;
    readonly onPublicationSubscribed: Event<{
        subscription: Subscription;
        stream?: RemoteStream | undefined;
    }>;
    readonly onPublicationUnsubscribed: Event<{
        subscription: Subscription;
    }>;
    constructor(args: {
        channel: SkyWayChannelImpl;
        name?: string;
        id: string;
        metadata?: string;
        plugin: PersonPlugin;
    });
    /**@private */
    _getConnection(localPersonId: string): P2PConnection;
    /**@private */
    _getOrCreateConnection(localPersonId: string): P2PConnection;
    private _createConnection;
    subscribe(publicationId: string): Promise<{
        subscription: Subscription<RemoteStream>;
    }>;
    unsubscribe(subscriptionId: string): Promise<void>;
}
export {};
//# sourceMappingURL=member.d.ts.map