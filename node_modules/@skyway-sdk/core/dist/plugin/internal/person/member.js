"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemotePersonImpl = void 0;
const common_1 = require("@skyway-sdk/common");
const config_1 = require("../../../config");
const member_1 = require("../../../member");
const connection_1 = require("./connection");
const messenger_1 = require("./connection/messenger");
const log = new common_1.Logger('packages/core/src/plugin/internal/person/member.ts');
/**@internal */
class RemotePersonImpl extends member_1.MemberImpl {
    constructor(args) {
        super(args);
        this.type = 'person';
        this.subtype = 'person';
        this.side = 'remote';
        this._connections = {};
        this.onPublicationSubscribed = this._events.make();
        this.onPublicationUnsubscribed = this._events.make();
        this.plugin = args.plugin;
        this.channel.onStreamUnsubscribed.add(({ subscription }) => {
            if (subscription.subscriber.id === this.id) {
                this.onPublicationUnsubscribed.emit({ subscription });
            }
        });
        this.channel.onStreamSubscribed.add(({ subscription }) => {
            if (subscription.subscriber.id === this.id) {
                this.onPublicationSubscribed.emit({ subscription });
            }
        });
        this.onLeft.once(() => {
            log.debug('RemotePerson left: ', { id: this.id });
            Object.values(this._connections).forEach((connection) => {
                connection.close();
            });
            this._connections = {};
        });
    }
    /**@private */
    _getConnection(localPersonId) {
        return this._connections[localPersonId];
    }
    /**@private */
    _getOrCreateConnection(localPersonId) {
        var _a;
        const connection = (_a = this._getConnection(localPersonId)) !== null && _a !== void 0 ? _a : this._createConnection(this.channel, localPersonId, this);
        return connection;
    }
    _createConnection(channel, localPersonId, endpointMember) {
        const localPerson = channel._getPerson(localPersonId);
        if (localPerson.side !== 'local') {
            throw new common_1.SkyWayError({
                type: 'invalidParameter',
                message: 'wrong localPerson type',
            });
        }
        const messaging = localPerson._messaging;
        const messenger = new messenger_1.P2PMessenger(messaging);
        const connection = new connection_1.P2PConnection(localPerson.iceManager, messenger, channel.id, localPersonId, endpointMember);
        this.plugin.messageBuffers[localPersonId].resolveMessagingBuffer(endpointMember);
        connection.onClose.once(() => {
            delete this._connections[localPersonId];
        });
        this._connections[localPersonId] = connection;
        return connection;
    }
    subscribe(publicationId) {
        return __awaiter(this, void 0, void 0, function* () {
            this.channel._subscribe(this.id, publicationId).catch((e) => {
                throw e;
            });
            const { subscription } = yield this.onPublicationSubscribed
                .watch(({ subscription }) => subscription.publication.id === publicationId, config_1.SkyWayConfig.get.rtcApi.timeout)
                .catch(() => {
                throw new common_1.SkyWayError({
                    type: 'timeout',
                    message: 'onPublicationSubscribed',
                });
            });
            return { subscription };
        });
    }
    unsubscribe(subscriptionId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.channel._unsubscribe(subscriptionId);
        });
    }
}
exports.RemotePersonImpl = RemotePersonImpl;
//# sourceMappingURL=member.js.map