import { Event } from '@skyway-sdk/common';
import { SkyWayChannelImpl } from '../channel';
import { Codec } from '../media';
import { ContentType } from '../media/stream';
import { RemoteStream } from '../media/stream/remote';
import { RemoteMember } from '../member/remoteMember';
import { Publication, PublicationImpl } from '../publication';
export * from './factory';
export interface Subscription<T extends RemoteStream = RemoteStream> {
    id: string;
    contentType: ContentType;
    publication: Publication;
    subscriber: RemoteMember;
    status: SubscriptionStatus;
    onCanceled: Event<void>;
    onStreamAttached: Event<void>;
    /**
     * @description {japanese} subscribeしているStreamの実体。
     * ローカルでSubscribeしているSubscriptionでなければundefinedとなる
     */
    stream?: T;
    /**
     * @description {japanese} Streamのコーデック
     */
    codec?: Codec;
    /**
     * @description {japanese} unsubscribeする
     */
    cancel: () => Promise<void>;
}
/**@internal */
export declare class SubscriptionImpl<T extends RemoteStream = RemoteStream> implements Subscription {
    readonly id: string;
    readonly contentType: ContentType;
    readonly subscriberId: string;
    readonly publicationId: string;
    private readonly _channel;
    get subscriber(): import("../member/remoteMember").RemoteMemberImpl;
    get publication(): PublicationImpl;
    private _status;
    get status(): SubscriptionStatus;
    codec?: Codec;
    private _stream?;
    readonly onCanceled: Event<void>;
    readonly onStreamAttached: Event<void>;
    constructor(args: {
        channel: SkyWayChannelImpl;
        id: string;
        contentType: ContentType;
        subscriberId: string;
        publicationId: string;
    });
    set stream(stream: T | undefined);
    get stream(): T | undefined;
    toJSON(): {
        id: string;
        contentType: ContentType;
        subscriberId: string;
        publication: PublicationImpl<import("../media/stream").LocalStream>;
        channelId: string;
    };
    /**@private */
    _canceled(): void;
    cancel(): Promise<void>;
}
export declare type SubscriptionStatus = 'created' | 'subscribed' | 'canceled';
//# sourceMappingURL=index.d.ts.map