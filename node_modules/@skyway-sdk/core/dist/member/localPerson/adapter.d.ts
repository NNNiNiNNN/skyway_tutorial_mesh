import { LocalStream, RemoteStream } from '../../media/stream';
import { Publication } from '../../publication';
import { Subscription } from '../../subscription';
import { LocalPerson, LocalPersonImpl, PublicationOptions } from '.';
/**@internal */
export declare class LocalPersonAdapter implements LocalPerson {
    /**@private */
    _impl: LocalPersonImpl;
    get keepaliveIntervalSec(): number | null | undefined;
    get type(): "person";
    get subtype(): "person";
    get side(): "local";
    get id(): string;
    get name(): string | undefined;
    get channel(): import("../..").SkyWayChannelImpl;
    get metadata(): string | undefined;
    get status(): import("..").MemberStatus;
    get publications(): Publication<LocalStream>[];
    get subscriptions(): Subscription<RemoteStream>[];
    private _events;
    readonly onLeft: import("@skyway-sdk/common").Event<void>;
    readonly onMetadataUpdated: import("@skyway-sdk/common").Event<string>;
    readonly onStreamPublished: import("@skyway-sdk/common").Event<{
        publication: Publication;
    }>;
    readonly onStreamUnpublished: import("@skyway-sdk/common").Event<{
        publication: Publication;
    }>;
    readonly onPublicationChanged: import("@skyway-sdk/common").Event<void>;
    readonly onStreamSubscribed: import("@skyway-sdk/common").Event<{
        subscription: Subscription;
        stream: RemoteStream;
    }>;
    readonly onStreamUnsubscribed: import("@skyway-sdk/common").Event<{
        subscription: Subscription;
    }>;
    readonly onSubscriptionChanged: import("@skyway-sdk/common").Event<void>;
    constructor(
    /**@private */
    _impl: LocalPersonImpl);
    apply(person: LocalPersonImpl): void;
    subscribe<T extends RemoteStream = RemoteStream>(publicationId: string): Promise<{
        subscription: Subscription<T>;
        stream: T;
    }>;
    unsubscribe(subscriptionId: string): Promise<void>;
    publish<T extends LocalStream>(stream: T, options?: PublicationOptions): Promise<Publication<T>>;
    unpublish(publicationId: string): Promise<void>;
    updateMetadata(metadata: string): Promise<void>;
    leave(): Promise<void>;
    getConnections(): import("../..").SkyWayConnection[];
    dispose(): void;
}
//# sourceMappingURL=adapter.d.ts.map