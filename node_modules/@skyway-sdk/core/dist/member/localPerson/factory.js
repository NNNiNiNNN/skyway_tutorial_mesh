"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLocalPerson = void 0;
const common_1 = require("@skyway-sdk/common");
const message_client_1 = require("@skyway-sdk/message-client");
const __1 = require("../..");
const config_1 = require("../../config");
const const_1 = require("../../const");
const _1 = require(".");
const log = new common_1.Logger('packages/core/src/member/person/local/factory.ts');
/**@internal */
function createLocalPerson(context, channel, memberDto, { keepaliveIntervalSec } = {}) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        log.debug('createLocalPerson', {
            channel,
            memberDto,
            keepaliveIntervalSec,
        });
        const { messageService, iceParamServer, rtcConfig } = config_1.SkyWayConfig.get;
        const session = new message_client_1.MessageClient({
            token: context.authTokenString,
            channelId: channel.id,
            channelName: channel.name,
            memberId: memberDto.id,
            memberName: memberDto.name,
        }, {
            logger: {
                error: (e) => {
                    throw new common_1.SkyWayError({
                        type: 'internalError',
                        message: 'messageClient error',
                        payload: { error: e },
                    });
                },
                debug: () => { },
            },
            msasDomain: messageService.domain,
            secure: messageService.secure,
        });
        log.debug('[start] connect messageService');
        yield session.connect().catch((err) => {
            throw new common_1.SkyWayError({
                type: 'internalError',
                message: 'messageClient failed to connect MessagingService',
                payload: err,
            });
        });
        log.debug('[end] connect messageService');
        const iceManager = new __1.IceManager(iceParamServer.domain, iceParamServer.version, iceParamServer.secure, rtcConfig.turnPolicy);
        log.debug('[start] fetch iceParams');
        yield iceManager
            .setupIceServers(context.authTokenString, memberDto.id, 
        // todo add option
        const_1.MaxIceParamServerTTL)
            .catch((err) => {
            throw new common_1.SkyWayError({
                type: 'internalError',
                message: 'iceManager failed to connect iceServer',
                payload: err,
            });
        });
        log.debug('[end] fetch iceParams');
        const person = yield _1.LocalPersonImpl.Create({
            iceManager,
            channel,
            messaging: session,
            metadata: memberDto.metadata,
            name: memberDto.name,
            id: memberDto.id,
            keepaliveIntervalSec,
        });
        for (const plugin of context.plugins) {
            yield ((_a = plugin._whenCreateLocalPerson) === null || _a === void 0 ? void 0 : _a.call(plugin, person));
            person._onDisposed.once(() => __awaiter(this, void 0, void 0, function* () {
                var _b;
                yield ((_b = plugin._whenDisposeLocalPerson) === null || _b === void 0 ? void 0 : _b.call(plugin, person));
            }));
        }
        return person;
    });
}
exports.createLocalPerson = createLocalPerson;
//# sourceMappingURL=factory.js.map