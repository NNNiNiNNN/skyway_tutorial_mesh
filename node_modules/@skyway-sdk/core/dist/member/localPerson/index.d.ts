import { Event } from '@skyway-sdk/common';
import { MessageClient } from '@skyway-sdk/message-client';
import { IceManager } from '../..';
import { SkyWayChannelImpl } from '../../channel';
import { Codec, EncodingParameters } from '../../media';
import { LocalStream, RemoteStream } from '../../media/stream';
import { SkyWayConnection } from '../../plugin/interface';
import { Publication } from '../../publication';
import { Subscription } from '../../subscription';
import { Member, MemberImpl } from '..';
import { Person } from '../person';
export * from './adapter';
export * from './factory';
export interface LocalPerson extends Person {
    readonly keepaliveIntervalSec?: number | null;
    /**
     * @description {japanese} このPersonがStreamをPublishしたときに発火するイベント
     */
    onStreamPublished: Event<{
        publication: Publication;
    }>;
    /**
     * @description {japanese} このPersonがStreamをUnpublishしたときに発火するイベント
     */
    onStreamUnpublished: Event<{
        publication: Publication;
    }>;
    onPublicationChanged: Event<void>;
    /**
     * @description {japanese} このPersonがStreamをSubscribeしたときに発火するイベント
     */
    onStreamSubscribed: Event<{
        subscription: Subscription;
        stream: RemoteStream;
    }>;
    /**
     * @description {japanese} このPersonがStreamをUnsubscribeしたときに発火するイベント
     */
    onStreamUnsubscribed: Event<{
        subscription: Subscription;
    }>;
    onSubscriptionChanged: Event<void>;
    /**
     * @description {japanese} StreamをPublishする
     */
    publish: <T extends LocalStream = LocalStream>(stream: T, options?: PublicationOptions) => Promise<Publication<T>>;
    /**
     * @description {japanese} StreamのPublicationをUnpublishする
     */
    unpublish: (publicationId: string) => Promise<void>;
    /**
     * @description {japanese} StreamのPublicationをSubscribeする
     */
    subscribe: <T extends RemoteStream = RemoteStream>(publicationId: string) => Promise<{
        subscription: Subscription<T>;
        stream: T;
    }>;
    /**
     * @description {japanese} StreamのSubscriptionをUnsubscribeする
     */
    unsubscribe: (subscriptionId: string) => Promise<void>;
    leave: () => Promise<void>;
    getConnections: () => SkyWayConnection[];
}
/**@internal */
export declare class LocalPersonImpl extends MemberImpl implements LocalPerson {
    private args;
    readonly type: "person";
    readonly subtype: "person";
    readonly side: "local";
    ttlSec?: number;
    readonly keepaliveIntervalSec: number | null | undefined;
    readonly iceManager: IceManager;
    readonly onStreamPublished: Event<{
        publication: Publication;
    }>;
    readonly onStreamUnpublished: Event<{
        publication: Publication;
    }>;
    readonly onPublicationChanged: Event<void>;
    readonly onStreamSubscribed: Event<{
        subscription: Subscription;
        stream: RemoteStream;
    }>;
    readonly onStreamUnsubscribed: Event<{
        subscription: Subscription;
    }>;
    readonly onSubscriptionChanged: Event<void>;
    private readonly _onStreamSubscribeFailed;
    /**@private */
    readonly _onDisposed: Event<void>;
    private readonly _publishingAgent;
    private readonly _subscribingAgent;
    private ttlInterval?;
    /**@private */
    readonly _messaging: MessageClient;
    /**@private */
    _disposed: boolean;
    static Create(...args: ConstructorParameters<typeof LocalPersonImpl>): Promise<LocalPersonImpl>;
    /**@private */
    constructor(args: {
        channel: SkyWayChannelImpl;
        messaging: MessageClient;
        name?: string;
        id: string;
        metadata?: string;
        keepaliveIntervalSec?: number | null;
        iceManager: IceManager;
    });
    private _listenChannelEvent;
    private _setupTtlTimer;
    private _listenBeforeUnload;
    private _handleOnStreamSubscribe;
    private _handleOnStreamUnsubscribe;
    publish<T extends LocalStream>(stream: T, options?: PublicationOptions): Promise<Publication<T>>;
    unpublish(publicationId: string): Promise<void>;
    subscribe<T extends RemoteStream = RemoteStream>(publicationId: string): Promise<{
        subscription: Subscription<T>;
        stream: T;
    }>;
    private _validatePublicationForSubscribe;
    unsubscribe(subscriptionId: string): Promise<void>;
    getConnections(): SkyWayConnection[];
    leave(): Promise<void>;
    dispose(): void;
}
export interface SignalEvent {
    sender: Member;
    data: object;
}
export interface PublicationOptions {
    metadata?: string | undefined;
    codecCapabilities?: Codec[];
    encodings?: EncodingParameters[];
}
//# sourceMappingURL=index.d.ts.map