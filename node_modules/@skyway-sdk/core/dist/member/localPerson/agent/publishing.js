"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PublishingAgent = void 0;
const common_1 = require("@skyway-sdk/common");
const config_1 = require("../../../config");
const log = new common_1.Logger('packages/core/src/dataPlane/agent/publishing.ts');
class PublishingAgent {
    constructor(_localPerson) {
        this._localPerson = _localPerson;
    }
    startPublishing(publication, subscriber) {
        return __awaiter(this, void 0, void 0, function* () {
            if (config_1.SkyWayConfig.get.debug.disableDPlane) {
                yield new Promise((r) => setTimeout(r, 500));
                return;
            }
            // タイミング的にstreamのセットが完了していない可能性がある
            if (!publication.stream) {
                yield this._localPerson.onStreamPublished
                    .watch((e) => e.publication.id === publication.id, config_1.SkyWayConfig.get.rtcApi.timeout)
                    .catch(() => {
                    throw new common_1.SkyWayError({
                        type: 'timeout',
                        message: 'PublishingAgent onStreamPublished',
                        payload: publication,
                    });
                });
            }
            const connection = subscriber._getOrCreateConnection(this._localPerson.id);
            if (connection.startPublishing) {
                yield connection.startPublishing(publication);
            }
        });
    }
    stopPublishing(publication, subscriber) {
        return __awaiter(this, void 0, void 0, function* () {
            const connection = subscriber._getConnection(this._localPerson.id);
            if (connection === null || connection === void 0 ? void 0 : connection.stopPublishing) {
                connection.stopPublishing(publication).catch((err) => {
                    log.error('stopPublishing failed', err);
                });
            }
        });
    }
}
exports.PublishingAgent = PublishingAgent;
//# sourceMappingURL=publishing.js.map