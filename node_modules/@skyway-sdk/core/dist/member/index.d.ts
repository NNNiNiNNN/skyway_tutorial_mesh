import { Event, Events } from '@skyway-sdk/common';
import model from '@skyway-sdk/model';
import { LocalStream, Publication, RemoteStream, Subscription } from '..';
import { Channel, SkyWayChannelImpl } from '../channel';
export interface Member {
    id: string;
    name?: string;
    channel: Channel;
    type: MemberType;
    subtype: string;
    side: MemberSide;
    metadata?: string;
    status: MemberStatus;
    onLeft: Event<void>;
    onMetadataUpdated: Event<string>;
    publications: Publication<LocalStream>[];
    subscriptions: Subscription<RemoteStream>[];
    /**
     * @description {japanese} metadataを更新する
     */
    updateMetadata: (metadata: string) => Promise<void>;
}
/**@internal */
export declare abstract class MemberImpl implements Member {
    readonly channel: SkyWayChannelImpl;
    readonly id: string;
    readonly name?: string;
    readonly type: MemberType;
    abstract readonly side: MemberSide;
    readonly subtype: string;
    private _metadata?;
    private _status;
    readonly _events: Events;
    readonly onLeft: Event<void>;
    readonly onMetadataUpdated: Event<string>;
    constructor(args: {
        channel: SkyWayChannelImpl;
        name?: string;
        id: string;
        metadata?: string;
    });
    get metadata(): string | undefined;
    get status(): MemberStatus;
    get publications(): Publication<LocalStream>[];
    get subscriptions(): Subscription<RemoteStream>[];
    toJSON(): model.Member;
    /** @private*/
    _left(): void;
    /** @private*/
    _metadataUpdated(metadata: string): void;
    updateMetadata(metadata: string): Promise<void>;
}
export declare type MemberStatus = 'created' | 'joined' | 'left';
export declare type MemberType = 'person' | 'bot';
export declare type MemberSide = 'local' | 'remote';
//# sourceMappingURL=index.d.ts.map