import { LogLevel } from '@skyway-sdk/common';
import { RtcApiConfig, RtcRpcApiConfig } from '@skyway-sdk/rtc-api-client';
export { RtcApiConfig, RtcRpcApiConfig };
export interface SkyWayConfigOptions {
    rtcApi: RtcApiConfig;
    iceParamServer: {
        domain?: string;
        version?: number;
        secure?: boolean;
    };
    messageService: {
        domain?: string;
        secure?: boolean;
    };
    rtcConfig: {
        encodedInsertableStreams?: boolean;
        timeout?: number;
        turnPolicy?: TurnPolicy;
    };
    token: {
        updateReminderSec?: number;
    };
    logLevel?: LogLevel;
    debug: {
        disableDPlane?: boolean;
    };
}
export declare type TurnPolicy = 'enable' | 'disable' | 'turnOnly';
export declare class SkyWayConfig implements SkyWayConfigOptions {
    private static _instance?;
    static initialize(options?: Partial<SkyWayConfigOptions>): SkyWayConfig;
    static get get(): SkyWayConfig;
    rtcApi: Required<SkyWayConfigOptions['rtcApi']>;
    iceParamServer: Required<SkyWayConfigOptions['iceParamServer']>;
    messageService: Required<SkyWayConfigOptions['messageService']>;
    rtcConfig: Required<SkyWayConfigOptions['rtcConfig']>;
    token: Required<SkyWayConfigOptions['token']>;
    logLevel: LogLevel;
    debug: Required<SkyWayConfigOptions['debug']>;
    private constructor();
}
//# sourceMappingURL=config.d.ts.map