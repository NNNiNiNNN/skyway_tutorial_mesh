import { Event } from '@skyway-sdk/common';
import model from '@skyway-sdk/model';
import { ChannelImpl, ChannelInit, ChannelQuery, MemberInit, PublicationInit } from '@skyway-sdk/rtc-api-client';
import { LocalPerson, LocalPersonImpl, RemoteMember, SkyWayContext } from '..';
import { Member } from '../member';
import { RemoteMemberImpl } from '../member/remoteMember';
import { Publication, PublicationImpl } from '../publication';
import { Subscription, SubscriptionImpl } from '../subscription';
import { ChannelClosedEvent, ChannelMetadataUpdatedEvent, MemberJoinedEvent, MemberLeftEvent, MemberMetadataUpdatedEvent, MembershipChangedEvent, PublicationChangedEvent, PublicationMetadataUpdatedEvent, StreamPublishedEvent, StreamSubscribedEvent, StreamUnpublishedEvent, StreamUnsubscribedEvent, SubscriptionChangedEvent } from './event';
export { ChannelInit, ChannelQuery, MemberInit };
export interface Channel {
    id: string;
    name?: string;
    appId: string;
    metadata?: string;
    status: ChannelStatus;
    /**
     * @description {japanese} このChannelが閉じられた時に発生するイベント
     */
    onClosed: Event<ChannelClosedEvent>;
    /**
     * @description {japanese} このChannelのMetadataが更新された時に発生するイベント
     */
    onMetadataUpdated: Event<ChannelMetadataUpdatedEvent>;
    onMembershipChanged: Event<MembershipChangedEvent>;
    /**
     * @description {japanese} ChannelにMemberが参加した時に発生するイベント
     */
    onMemberJoined: Event<MemberJoinedEvent>;
    /**
     * @description {japanese} ChannelからMemberが退出した時に発生するイベント
     */
    onMemberLeft: Event<MemberLeftEvent>;
    /**
     * @description {japanese} MemberのMetadataが更新された時に発生するイベント
     */
    onMemberMetadataUpdated: Event<MemberMetadataUpdatedEvent>;
    onPublicationChanged: Event<PublicationChangedEvent>;
    /**
     * @description {japanese} ChannelのStreamがPublishされた時に発生するイベント
     */
    onStreamPublished: Event<StreamPublishedEvent>;
    /**
     * @description {japanese} ChannelからStreamがUnpublishされた時に発生するイベント
     */
    onStreamUnpublished: Event<StreamUnpublishedEvent>;
    /**
     * @description {japanese} StreamのPublicationのMetadataが更新された時に発生するイベント
     */
    onPublicationMetadataUpdated: Event<PublicationMetadataUpdatedEvent>;
    onSubscriptionChanged: Event<SubscriptionChangedEvent>;
    /**
     * @description {japanese} ChannelのPublicationがSubscribeされた時に発生するイベント
     */
    onStreamSubscribed: Event<StreamSubscribedEvent>;
    /**
     * @description {japanese} ChannelのPublicationがUnsubscribeされた時に発生するイベント
     */
    onStreamUnsubscribed: Event<StreamUnsubscribedEvent>;
    /**
     * @description {japanese} Channel中のMemberの一覧を取得する
     */
    members: RemoteMember[];
    /**
     * @description {japanese} Channel中のLocalPersonの一覧を取得する
     */
    persons: LocalPerson[];
    /**
     * @description {japanese} Channel中のBotの一覧を取得する
     */
    bots: RemoteMember[];
    /**
     * @description {japanese} Channel中のPublicationの一覧を取得する
     */
    publications: Publication[];
    /**
     * @description {japanese} Channel中のSubscriptionの一覧を取得する
     */
    subscriptions: Subscription[];
    /**
     * @description {japanese} ChannelにMemberを追加する
     */
    join: (memberInit?: {
        name?: MemberInit['name'];
        metadata?: MemberInit['metadata'];
        keepaliveIntervalSec?: number;
    }) => Promise<LocalPerson>;
    /**
     * @description {japanese} ChannelからMemberを退出させる
     */
    leave: (member: Member) => Promise<void>;
    memberMoveFromOtherChannel: (adapter: LocalPerson) => Promise<void>;
    /**
     * @description {japanese} ChannelのMetadataを更新する
     */
    updateMetadata: (metadata: string) => Promise<void>;
    /**
     * @description {japanese} Channelを閉じる
     */
    close: () => Promise<void>;
    dispose: () => void;
}
/**@internal */
export declare class SkyWayChannelImpl implements Channel {
    private _context;
    /**@private */
    private readonly _channelImpl;
    readonly id: model.Channel['id'];
    readonly name: model.Channel['name'];
    readonly appId: string;
    private _status;
    private readonly _api;
    disposed: boolean;
    private _members;
    /**@private */
    _getMember: (id: string) => RemoteMemberImpl;
    private _addMember;
    private _removeMember;
    private _persons;
    /**@private */
    _getPerson: (id: string) => LocalPersonImpl;
    private _addPerson;
    private _removePerson;
    private _publications;
    /**@private */
    _getPublication: (id: string) => PublicationImpl<import("..").LocalStream>;
    /**@private */
    _addPublication(p: model.Publication): PublicationImpl<import("..").LocalStream>;
    private _removePublication;
    private _subscriptions;
    /**@private */
    _getSubscription: (id: string) => SubscriptionImpl<import("..").RemoteStream>;
    /**@private */
    _addSubscription(s: model.Subscription): SubscriptionImpl<import("..").RemoteStream>;
    private _removeSubscription;
    private readonly _events;
    readonly onClosed: Event<ChannelClosedEvent>;
    readonly onMetadataUpdated: Event<ChannelMetadataUpdatedEvent>;
    readonly onMembershipChanged: Event<MembershipChangedEvent>;
    readonly onMemberJoined: Event<MemberJoinedEvent>;
    readonly onMemberLeft: Event<MemberLeftEvent>;
    readonly onMemberMetadataUpdated: Event<MemberMetadataUpdatedEvent>;
    readonly onPublicationChanged: Event<PublicationChangedEvent>;
    readonly onStreamPublished: Event<StreamPublishedEvent>;
    readonly onStreamUnpublished: Event<StreamUnpublishedEvent>;
    readonly onPublicationMetadataUpdated: Event<PublicationMetadataUpdatedEvent>;
    readonly onSubscriptionChanged: Event<SubscriptionChangedEvent>;
    readonly onStreamSubscribed: Event<StreamSubscribedEvent>;
    readonly onStreamUnsubscribed: Event<StreamUnsubscribedEvent>;
    /**@private */
    readonly _onDisposed: Event<void>;
    constructor(_context: SkyWayContext, 
    /**@private */
    _channelImpl: ChannelImpl);
    get members(): RemoteMemberImpl[];
    get persons(): LocalPerson[];
    get bots(): RemoteMember[];
    get publications(): Publication[];
    get subscriptions(): Subscription[];
    get metadata(): string | undefined;
    get status(): ChannelStatus;
    toJSON(): {
        id: string;
        name: string;
        appId: string;
        metadata: string | undefined;
        members: RemoteMemberImpl[];
        publications: Publication<import("..").LocalStream>[];
        subscriptions: Subscription<import("..").RemoteStream>[];
    };
    private _setupPropertiesFromChannel;
    private _setupListenChannelEvent;
    private _handleOnChannelClose;
    private _handleOnChannelMetadataUpdate;
    private _handleOnMemberJoin;
    private _handleOnMemberLeft;
    private _handleOnMemberMetadataUpdate;
    private _handleOnStreamPublish;
    private _handleOnStreamUnpublish;
    private _handleOnStreamMetadataUpdate;
    private _handleOnStreamSubscribe;
    private _handleOnStreamUnsubscribe;
    join(options?: {
        name?: MemberInit['name'];
        metadata?: MemberInit['metadata'];
        keepaliveIntervalSec?: number | null;
    }): Promise<LocalPerson>;
    readonly leave: (member: Member) => Promise<void>;
    memberMoveFromOtherChannel(adapter: LocalPerson): Promise<void>;
    private _createLocalPerson;
    readonly updateMetadata: (metadata: string) => Promise<void>;
    readonly close: () => Promise<void>;
    /**@private */
    readonly _updateMemberTtl: (memberId: string, ttlSec: number) => Promise<void>;
    /**@private */
    readonly _updateMemberMetadata: (memberId: string, metadata: string) => Promise<void>;
    /**@private */
    readonly _publish: (init: PublicationInit) => Promise<model.Publication>;
    /**@private */
    readonly _unpublish: (publicationId: string) => Promise<void>;
    /**@private */
    readonly _subscribe: (subscriberId: string, publicationId: string) => Promise<model.Subscription>;
    /**@private */
    readonly _unsubscribe: (subscriptionId: string) => Promise<void>;
    /**@private */
    readonly _updatePublicationMetadata: (publicationId: string, metadata: string) => Promise<void>;
    dispose(): void;
}
export declare class SkyWayChannel {
    /**
     * @description {japanese} Channelの作成
     */
    static Create(context: SkyWayContext, init?: ChannelInit): Promise<Channel>;
    /**
     * @description {japanese} 既存のChannelの取得
     */
    static Find(context: SkyWayContext, query: ChannelQuery): Promise<Channel>;
    /**
     * @description {japanese} Channelの取得を試み、存在しなければ作成する
     */
    static FindOrCreate(context: SkyWayContext, query: ChannelInit): Promise<Channel>;
    /**@private */
    constructor();
}
export declare type ChannelStatus = 'created' | 'opened' | 'closed';
//# sourceMappingURL=index.d.ts.map