"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoomPublicationImpl = void 0;
const common_1 = require("@skyway-sdk/common");
const common_2 = require("@skyway-sdk/common");
const log = new common_1.Logger('packages/room/src/publication/index.ts');
/**@internal */
class RoomPublicationImpl {
    constructor(_publication, _room) {
        this._publication = _publication;
        this._room = _room;
        this._events = new common_2.Events();
        this.onUnpublished = this._events.make();
        this.onSubscribed = this._events.make();
        this.onUnsubscribed = this._events.make();
        this.onSubscriptionChanged = this._events.make();
        this.onMetadataUpdated = this._events.make();
        this.id = _publication.id;
        this.contentType = _publication.contentType;
        this.codecCapabilities = _publication.codecCapabilities;
        this._origin = _publication.origin;
        this.publisher = this._room._getMember(this._origin ? this._origin.publisher.id : _publication.publisher.id);
        this._setEvents();
    }
    _setEvents() {
        this._room.onStreamUnpublished.add((e) => {
            if (e.publication.id === this.id) {
                this.onUnpublished.emit();
                this._events.dispose();
            }
        });
        this._room.onStreamSubscribed.add((e) => {
            if (e.subscription.publication.id === this.id) {
                this.onSubscribed.emit();
                this.onSubscriptionChanged.emit();
            }
        });
        this._room.onStreamUnsubscribed.add((e) => {
            if (e.subscription.publication.id === this.id) {
                this.onUnsubscribed.emit();
                this.onSubscriptionChanged.emit();
            }
        });
        this._publication.onMetadataUpdated.pipe(this.onMetadataUpdated);
    }
    get encodings() {
        return this._publication.encodings;
    }
    get stream() {
        if (this._origin) {
            return this._origin.stream;
        }
        return this._publication.stream;
    }
    get subscriptions() {
        return this._publication.subscriptions.map((s) => this._room._getSubscription(s.id));
    }
    get status() {
        return this._publication.status;
    }
    get metadata() {
        if (this._origin) {
            return this._origin.metadata;
        }
        return this._publication.metadata;
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._origin) {
                yield Promise.all([
                    this._origin.cancel(),
                    this.onUnpublished.asPromise(),
                ]);
            }
            else {
                yield Promise.all([
                    this._publication.cancel(),
                    this.onUnpublished.asPromise(),
                ]);
            }
        });
    }
    updateMetadata(metadata) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._origin) {
                return this._origin.updateMetadata(metadata);
            }
            return this._publication.updateMetadata(metadata);
        });
    }
    updateEncodings(encodings) {
        return this._publication.updateEncodings(encodings);
    }
}
exports.RoomPublicationImpl = RoomPublicationImpl;
//# sourceMappingURL=index.js.map