"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.roomTypes = exports.SkyWayRoom = void 0;
const common_1 = require("@skyway-sdk/common");
const core_1 = require("@skyway-sdk/core");
const sfu_client_1 = require("@skyway-sdk/sfu-client");
const uuid_1 = require("uuid");
const __1 = require("..");
class SkyWayRoom {
    /**
     * @description {japanese} Roomの作成
     */
    static Create(context, init) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const plugin = new sfu_client_1.SfuClientPlugin((_b = (_a = init) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.sfu);
            context.registerPlugin(plugin);
            const channel = yield core_1.SkyWayChannel.Create(context, {
                name: (_c = init.name) !== null && _c !== void 0 ? _c : (0, uuid_1.v4)(),
                metadata: init.metadata,
            });
            const room = yield this._Factory(context, init.type, channel);
            return room;
        });
    }
    /**
     * @description {japanese} 既存のRoomの取得
     */
    static Find(context, query, roomType, options) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const plugin = new sfu_client_1.SfuClientPlugin((_a = options) === null || _a === void 0 ? void 0 : _a.sfu);
            context.registerPlugin(plugin);
            const channel = yield core_1.SkyWayChannel.Find(context, query);
            const room = yield this._Factory(context, roomType, channel);
            return room;
        });
    }
    /**
     * @description {japanese} Roomの取得を試み、存在しなければ作成する
     */
    static FindOrCreate(context, init) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const plugin = new sfu_client_1.SfuClientPlugin((_b = (_a = init) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.sfu);
            context.registerPlugin(plugin);
            const channel = yield core_1.SkyWayChannel.FindOrCreate(context, Object.assign({}, init));
            const room = yield this._Factory(context, init.type, channel);
            return room;
        });
    }
    static _Factory(context, roomType, channel) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (roomType) {
                case 'p2p':
                    return new __1.P2PRoomImpl(channel);
                case 'sfu':
                    return (yield __1.SfuRoomImpl.Create(context, channel));
                default:
                    throw new common_1.SkyWayError({
                        type: 'notImplemented',
                        message: 'invalid RoomType',
                    });
            }
        });
    }
}
exports.SkyWayRoom = SkyWayRoom;
exports.roomTypes = ['sfu', 'p2p'];
//# sourceMappingURL=index.js.map