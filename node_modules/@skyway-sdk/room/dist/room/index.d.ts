import { SkyWayContext } from '@skyway-sdk/core';
import { SfuApiOptions, SfuClientPluginOptions } from '@skyway-sdk/sfu-client';
import { P2PRoom } from './p2p';
import { SfuRoom } from './sfu';
export { SfuApiOptions, SfuClientPluginOptions };
export declare class SkyWayRoom {
    /**
     * @description {japanese} Roomの作成
     */
    static Create<Init extends RoomInit>(context: SkyWayContext, init: Init): Promise<Init["type"] extends "sfu" ? SfuRoom : P2PRoom>;
    /**
     * @description {japanese} 既存のRoomの取得
     */
    static Find<Type extends RoomType>(context: SkyWayContext, query: {
        id?: string;
        name?: string;
    }, roomType: Type, options?: Type extends 'sfu' ? SfuRoomOptions : void): Promise<Type extends "sfu" ? SfuRoom : P2PRoom>;
    /**
     * @description {japanese} Roomの取得を試み、存在しなければ作成する
     */
    static FindOrCreate<Init extends RoomInit>(context: SkyWayContext, init: Init): Promise<Init["type"] extends "p2p" ? P2PRoom : SfuRoom>;
    private static _Factory;
}
export declare type RoomInit = P2PRoomInit | SfuRoomInit;
export interface RoomInitBase {
    name?: string;
    metadata?: string;
    type: RoomType;
}
export interface P2PRoomInit extends RoomInitBase {
    type: 'p2p';
}
export declare type SfuRoomOptions = {
    sfu: Partial<SfuClientPluginOptions>;
};
export interface SfuRoomInit extends RoomInitBase {
    type: 'sfu';
    options?: Partial<SfuRoomOptions>;
}
export declare const roomTypes: readonly ["sfu", "p2p"];
export declare type RoomType = typeof roomTypes[number];
//# sourceMappingURL=index.d.ts.map