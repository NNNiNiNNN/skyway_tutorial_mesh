import { Event } from '@skyway-sdk/common';
import { ChannelStatus, Publication, SkyWayChannelImpl, Subscription } from '@skyway-sdk/core';
import { RemoteRoomMember, RemoteRoomMemberImpl, RoomMember, RoomPublication, RoomPublicationImpl, RoomSubscription, RoomSubscriptionImpl } from '..';
import { LocalRoomMember } from '../member/local/base';
import { RoomType } from '.';
import * as event from './event';
export declare type RoomStatus = ChannelStatus;
export interface Room {
    readonly type: RoomType;
    readonly onClosed: Event<event.RoomClosedEvent>;
    readonly onMetadataUpdated: Event<event.RoomMetadataUpdatedEvent>;
    /**
     * @description {japanese} RoomにMemberが参加したときに発火するイベント
     */
    readonly onMemberJoined: Event<event.MemberJoinedEvent>;
    /**
     * @description {japanese} RoomからMemberが離脱したときに発火するイベント
     */
    readonly onMemberLeft: Event<event.MemberLeftEvent>;
    readonly onMembershipChanged: Event<event.MembershipChangedEvent>;
    /**
     * @description {japanese} Room上のMemberのメタデータが変更されたときに発火するイベント
     */
    readonly onMemberMetadataUpdated: Event<event.MemberMetadataUpdatedEvent>;
    /**
     * @description {japanese} RoomにStreamがPublishされたときに発火するイベント
     */
    readonly onStreamPublished: Event<event.StreamPublishedEvent>;
    /**
     * @description {japanese} RoomからStreamがUnPublishされたときに発火するイベント
     */
    readonly onStreamUnpublished: Event<event.StreamUnpublishedEvent>;
    readonly onPublicationChanged: Event<event.PublicationChangedEvent>;
    /**
     * @description {japanese} Room上のPublicationのメタデータが変更されたときに発火するイベント
     */
    readonly onPublicationMetadataUpdated: Event<event.PublicationMetadataUpdatedEvent>;
    /**
     * @description {japanese} Room上のStreamがSubscribeされたときに発火するイベント
     */
    readonly onStreamSubscribed: Event<event.StreamSubscribedEvent>;
    /**
     * @description {japanese} Room上のStreamがUnSubscribeされたときに発火するイベント
     */
    readonly onStreamUnsubscribed: Event<event.StreamUnsubscribedEvent>;
    readonly onSubscriptionChangedEvent: Event<event.SubscriptionChangedEvent>;
    readonly id: string;
    readonly name?: string;
    readonly metadata?: string;
    readonly status: RoomStatus;
    readonly disposed: boolean;
    /**
     * @description {japanese} Roomに参加しているMemberのリスト
     */
    readonly members: RemoteRoomMember[];
    /**
     * @description {japanese} RoomにPublishされているStreamのPublicationのリスト
     */
    readonly publications: RoomPublication[];
    /**
     * @description {japanese} Room上のStreamのSubscription情報のリスト
     */
    readonly subscriptions: RoomSubscription[];
    /**
     * @description {japanese} RoomにMemberを参加させる
     */
    join: (memberInit?: RoomMemberInit) => Promise<LocalRoomMember>;
    leave: (member: RoomMember) => Promise<void>;
    memberMoveFromOtherRoom: (member: LocalRoomMember) => Promise<LocalRoomMember>;
    updateMetadata: (metadata: string) => Promise<void>;
    close: () => Promise<void>;
    dispose: () => Promise<void>;
}
/**@internal */
export declare abstract class RoomImpl implements Room {
    _channel: SkyWayChannelImpl;
    readonly type: RoomType;
    protected _members: {
        [memberId: string]: RemoteRoomMemberImpl;
    };
    /**@private */
    _getMember(id: string): RemoteRoomMemberImpl;
    protected _publications: {
        [publicationId: string]: RoomPublicationImpl;
    };
    /**@private */
    _getPublication(id: string): RoomPublicationImpl<import("@skyway-sdk/core").LocalStream>;
    /**@private */
    _addPublication(p: Publication): RoomPublicationImpl<import("@skyway-sdk/core").LocalStream>;
    protected _subscriptions: {
        [subscriptionId: string]: RoomSubscriptionImpl;
    };
    /**@private */
    _getSubscription(id: string): RoomSubscriptionImpl<import("@skyway-sdk/core").RemoteStream>;
    /**@private */
    _addSubscription(s: Subscription): RoomSubscriptionImpl<import("@skyway-sdk/core").RemoteStream>;
    private readonly _events;
    readonly onClosed: Event<event.RoomClosedEvent>;
    readonly onMetadataUpdated: Event<event.RoomMetadataUpdatedEvent>;
    readonly onMemberJoined: Event<event.MemberJoinedEvent>;
    readonly onMemberLeft: Event<event.MemberLeftEvent>;
    readonly onMembershipChanged: Event<event.MembershipChangedEvent>;
    readonly onMemberMetadataUpdated: Event<event.MemberMetadataUpdatedEvent>;
    readonly onStreamPublished: Event<event.StreamPublishedEvent>;
    readonly onStreamUnpublished: Event<event.StreamUnpublishedEvent>;
    readonly onPublicationChanged: Event<event.PublicationChangedEvent>;
    readonly onPublicationMetadataUpdated: Event<event.PublicationMetadataUpdatedEvent>;
    readonly onStreamSubscribed: Event<event.StreamSubscribedEvent>;
    readonly onStreamUnsubscribed: Event<event.StreamUnsubscribedEvent>;
    readonly onSubscriptionChangedEvent: Event<event.SubscriptionChangedEvent>;
    get id(): string;
    get name(): string;
    get metadata(): string | undefined;
    get status(): ChannelStatus;
    get disposed(): boolean;
    constructor(type: RoomType, _channel: SkyWayChannelImpl);
    private _handleOnMemberMetadataUpdate;
    protected abstract setChannelState(): void;
    protected abstract setChannelListener(): void;
    get members(): RemoteRoomMember[];
    get publications(): RoomPublication[];
    get subscriptions(): RoomSubscription[];
    protected joinChannel(roomMemberInit?: RoomMemberInit): Promise<import("@skyway-sdk/core").LocalPerson>;
    abstract join(memberInit?: RoomMemberInit): Promise<LocalRoomMember>;
    leave(member: RoomMember): Promise<void>;
    memberMoveFromOtherRoom(member: LocalRoomMember): Promise<LocalRoomMember>;
    updateMetadata(metadata: string): Promise<void>;
    close(): Promise<void>;
    dispose(): Promise<void>;
}
export interface RoomMemberInit {
    name?: string;
    metadata?: string;
    keepaliveIntervalSec?: number;
}
//# sourceMappingURL=base.d.ts.map