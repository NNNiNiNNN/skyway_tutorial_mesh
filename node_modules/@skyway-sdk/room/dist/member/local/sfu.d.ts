import { LocalPersonAdapter, LocalStream, RemoteStream } from '@skyway-sdk/core';
import { RoomPublication } from '../..';
import { SfuRoomImpl } from '../../room/sfu';
import { RoomSubscription } from '../../subscription';
import { LocalRoomMember, LocalRoomMemberImpl, PublicationOptions } from './base';
export interface LocalSFURoomMember extends LocalRoomMember {
    /**
     * @description {japanese} RoomにStreamをPublishする
     */
    publish: (stream: LocalStream, options?: PublicationOptions & SfuRoomPublicationOptions) => Promise<RoomPublication>;
}
/**@internal */
export declare class LocalSFURoomMemberImpl extends LocalRoomMemberImpl implements LocalSFURoomMember {
    /**@private */
    constructor(member: LocalPersonAdapter, room: SfuRoomImpl);
    publish(stream: LocalStream, options?: PublicationOptions & SfuRoomPublicationOptions): Promise<RoomPublication>;
    /**
     * @description {japanese} Room上のStreamをUnPublishする
     */
    unpublish(publicationId: string): Promise<void>;
    /**
     * @description {japanese} MemberがRoom上のStreamのPublicationをSubscribeする
     */
    subscribe<T extends RemoteStream = RemoteStream>(publicationId: string): Promise<{
        subscription: RoomSubscription<T>;
        stream: T;
    }>;
    /**
     * @description {japanese} MemberがSubscribeしているStreamのSubscriptionをUnSubscribeする
     */
    unsubscribe(subscriptionId: string): Promise<void>;
    _updateRoom(room: SfuRoomImpl): void;
}
export interface SfuRoomPublicationOptions {
    maxSubscribers?: number;
    policy?: 'tile' | 'normal';
}
//# sourceMappingURL=sfu.d.ts.map