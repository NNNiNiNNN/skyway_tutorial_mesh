import { LocalPersonAdapter, LocalStream, RemoteStream } from '@skyway-sdk/core';
import { RoomPublication } from '../..';
import { P2PRoomImpl } from '../../room/p2p';
import { RoomSubscription } from '../../subscription';
import { LocalRoomMember, LocalRoomMemberImpl, PublicationOptions } from './base';
export interface LocalP2PRoomMember extends LocalRoomMember {
    /**
     * @description {japanese} StreamをPublishする
     */
    publish: <T extends LocalStream = LocalStream>(stream: T, options?: PublicationOptions) => Promise<RoomPublication>;
}
/**@internal */
export declare class LocalP2PRoomMemberImpl extends LocalRoomMemberImpl implements LocalP2PRoomMember {
    /**@private */
    constructor(member: LocalPersonAdapter, room: P2PRoomImpl);
    publish(stream: LocalStream, options?: PublicationOptions): Promise<RoomPublication>;
    unpublish(publicationId: string): Promise<void>;
    subscribe<T extends RemoteStream = RemoteStream>(publicationId: string): Promise<{
        subscription: RoomSubscription<T>;
        stream: T;
    }>;
    unsubscribe(subscriptionId: string): Promise<void>;
    _updateRoom(room: P2PRoomImpl): void;
}
//# sourceMappingURL=p2p.d.ts.map