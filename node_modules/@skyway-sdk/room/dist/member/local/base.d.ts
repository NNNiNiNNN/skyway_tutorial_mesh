import { Event } from '@skyway-sdk/common';
import { LocalPerson, LocalPersonAdapter, PublicationOptions as BaseOptions, RemoteStream } from '@skyway-sdk/core';
import { RoomPublication } from '../../publication';
import { Room, RoomImpl } from '../../room/base';
import { RoomSubscription } from '../../subscription';
import { RoomMember, RoomMemberImpl } from '..';
export interface LocalRoomMember extends RoomMember {
    side: 'local';
    room: Room;
    /**@private */
    _updateRoom(room: Room): void;
    /**
     * @description {japanese} このMemberがStreamをPublishしたときに発火するイベント
     */
    onStreamPublished: Event<{
        publication: RoomPublication;
    }>;
    /**
     * @description {japanese} このMemberがStreamをUnPublishしたときに発火するイベント
     */
    onStreamUnpublished: Event<{
        publication: RoomPublication;
    }>;
    /**
     * @description {japanese} このMemberがStreamをSubscribeしたときに発火するイベント
     */
    onPublicationChanged: Event<void>;
    /**
     * @description {japanese} このMemberがStreamをSubscribeしたときに発火するイベント
     */
    onStreamSubscribed: Event<{
        subscription: RoomSubscription;
        stream: RemoteStream;
    }>;
    /**
     * @description {japanese} このMemberがStreamをUnsubscribeしたときに発火するイベント
     */
    onStreamUnsubscribed: Event<{
        subscription: RoomSubscription;
    }>;
    onSubscriptionChanged: Event<void>;
    /**
     * @description {japanese} StreamのPublicationをUnpublishする
     */
    unpublish: (publicationId: string) => Promise<void>;
    /**
     * @description {japanese} StreamのPublicationをSubscribeする
     */
    subscribe: <T extends RemoteStream = RemoteStream>(publicationId: string) => Promise<{
        subscription: RoomSubscription<T>;
        stream: T;
    }>;
    /**
     * @description {japanese} StreamのSubscriptionをUnsubscribeする
     */
    unsubscribe: (subscriptionId: string) => Promise<void>;
    leave: () => Promise<void>;
}
/**@internal */
export declare abstract class LocalRoomMemberImpl extends RoomMemberImpl implements LocalRoomMember {
    readonly side = "local";
    readonly _local: LocalPerson;
    readonly onStreamPublished: Event<{
        publication: RoomPublication;
    }>;
    readonly onStreamUnpublished: Event<{
        publication: RoomPublication;
    }>;
    readonly onPublicationChanged: Event<void>;
    readonly onStreamSubscribed: Event<{
        subscription: RoomSubscription;
        stream: RemoteStream;
    }>;
    readonly onStreamUnsubscribed: Event<{
        subscription: RoomSubscription;
    }>;
    readonly onSubscriptionChanged: Event<void>;
    /**@private */
    constructor(member: LocalPersonAdapter, room: RoomImpl);
    protected _listenRoomEvent(): void;
    abstract unpublish(publicationId: string): Promise<void>;
    abstract subscribe<T extends RemoteStream = RemoteStream>(publicationId: string): Promise<{
        subscription: RoomSubscription<T>;
        stream: T;
    }>;
    abstract unsubscribe(subscriptionId: string): Promise<void>;
    leave(): Promise<void>;
    abstract _updateRoom(room: Room): void;
}
export interface PublicationOptions extends BaseOptions {
    /**sfu only */
    maxSubscribers?: number;
}
//# sourceMappingURL=base.d.ts.map