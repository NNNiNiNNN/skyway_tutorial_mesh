"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoomSubscriptionImpl = void 0;
const common_1 = require("@skyway-sdk/common");
const core_1 = require("@skyway-sdk/core");
/**@internal */
class RoomSubscriptionImpl {
    constructor(
    /**@private */
    _subscription, _room) {
        this._subscription = _subscription;
        this._room = _room;
        this.onStreamAttached = new core_1.Event();
        this.id = _subscription.id;
        this.contentType = _subscription.contentType;
        _subscription.onStreamAttached.pipe(this.onStreamAttached);
    }
    get stream() {
        return this._subscription.stream;
    }
    get publication() {
        const publicationId = this._subscription.publication.id;
        const publication = this._room._getPublication(publicationId);
        return publication;
    }
    get subscriber() {
        return this._room._getMember(this._subscription.subscriber.id);
    }
    get status() {
        return this._subscription.status;
    }
    cancel() {
        return __awaiter(this, void 0, void 0, function* () {
            this._subscription.cancel();
            yield this._room.onStreamUnsubscribed
                .watch((e) => e.subscription.id === this.id, core_1.SkyWayConfig.get.rtcApi.timeout)
                .catch(() => {
                throw new common_1.SkyWayError({
                    type: 'timeout',
                    message: 'onStreamUnsubscribed',
                });
            });
        });
    }
}
exports.RoomSubscriptionImpl = RoomSubscriptionImpl;
//# sourceMappingURL=index.js.map