import { ContentType, Event, RemoteStream, Subscription, SubscriptionStatus } from '@skyway-sdk/core';
import { RemoteRoomMember } from '../member/remote/base';
import { RoomPublication } from '../publication';
import { RoomImpl } from '../room/base';
export interface RoomSubscription<T extends RemoteStream = RemoteStream> {
    readonly id: string;
    readonly contentType: ContentType;
    readonly publication: RoomPublication;
    readonly onStreamAttached: Event<void>;
    subscriber: RemoteRoomMember;
    /**
     * @description {japanese} subscribeしているStreamの実体。
     * ローカルでSubscribeしているSubscriptionでなければundefinedとなる
     */
    stream?: T;
    status: RoomSubscriptionStatus;
    /**
     * @description {japanese} unsubscribeする
     */
    cancel: () => Promise<void>;
}
/**@internal */
export declare class RoomSubscriptionImpl<T extends RemoteStream = RemoteStream> implements RoomSubscription {
    /**@private */
    _subscription: Subscription<T>;
    private _room;
    readonly id: string;
    readonly contentType: ContentType;
    readonly onStreamAttached: Event<void>;
    constructor(
    /**@private */
    _subscription: Subscription<T>, _room: RoomImpl);
    get stream(): T | undefined;
    get publication(): import("../publication").RoomPublicationImpl<import("@skyway-sdk/core").LocalStream>;
    get subscriber(): import("../member/remote/base").RemoteRoomMemberImpl;
    get status(): SubscriptionStatus;
    cancel(): Promise<void>;
}
export declare type RoomSubscriptionStatus = SubscriptionStatus;
//# sourceMappingURL=index.d.ts.map