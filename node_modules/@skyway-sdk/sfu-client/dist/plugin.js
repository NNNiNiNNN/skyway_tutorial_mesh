"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SfuClientPlugin = void 0;
const common_1 = require("@skyway-sdk/common");
const core_1 = require("@skyway-sdk/core");
const sfu_api_client_1 = require("@skyway-sdk/sfu-api-client");
const const_1 = require("./const");
const member_1 = require("./member");
class SfuClientPlugin extends core_1.SkyWayPlugin {
    constructor(_options = {}) {
        super();
        this.subtype = member_1.SfuBotMember.subtype;
        /**@private */
        this._createRemoteMember = (channel, sfuBot) => {
            const member = new member_1.SfuBotMember(Object.assign(Object.assign({}, this._context), { channel, id: sfuBot.id, name: sfuBot.name, metadata: sfuBot.metadata, plugin: this, api: this._api, context: this._context }));
            return member;
        };
        /**
         * @description {japanese} SFU BotをChannelに呼び出す
         */
        this.createBot = (channel) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const botId = yield this._api.createBot({
                appId: this._context.authToken.scope.app.id,
                channelId: channel.id,
            });
            const member = (_a = channel._getMember(botId)) !== null && _a !== void 0 ? _a : (yield channel.onMemberJoined
                .watch((e) => e.member.id === botId, this._context.config.rtcApi.timeout)
                .catch((error) => {
                throw new common_1.SkyWayError({
                    type: 'timeout',
                    message: 'SfuClientPlugin onMemberJoined',
                    payload: { error },
                });
            })).member;
            return member;
        });
        /**
         * @description {japanese} SFU BotをChannelから削除する
         */
        this.deleteBot = (channel, botId) => __awaiter(this, void 0, void 0, function* () {
            this._api.deleteBot({ botId });
            yield channel.onMemberLeft
                .watch((e) => e.member.id === botId, this._context.config.rtcApi.timeout)
                .catch(() => {
                throw new common_1.SkyWayError({
                    type: 'timeout',
                    message: 'onMemberLeft',
                });
            });
        });
        this.options = Object.assign(Object.assign({}, const_1.defaultSfuClientPluginOptions), _options);
        this._onContextAttached.once(() => {
            this._api = new sfu_api_client_1.SfuRestApiClient(this._context.authTokenString, Object.assign(Object.assign({}, this.options), { logLevel: this._context.config.logLevel }));
            this._context._onTokenUpdated.add((token) => {
                this._api.updateToken(token);
            });
        });
    }
}
exports.SfuClientPlugin = SfuClientPlugin;
//# sourceMappingURL=plugin.js.map