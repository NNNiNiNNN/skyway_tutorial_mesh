import { Event } from '@skyway-sdk/common';
import { IceManager, LocalAudioStream, LocalVideoStream, Member, Publication, PublicationImpl, SkyWayConnection, SkyWayContext, Subscription, SubscriptionImpl } from '@skyway-sdk/core';
import { SfuRestApiClient } from '@skyway-sdk/sfu-api-client';
import { Receiver } from './receiver';
import { Sender } from './sender';
export declare class SFUConnection implements SkyWayConnection {
    private readonly _iceManager;
    private readonly _api;
    readonly channelId: string;
    readonly localPersonId: string;
    readonly remoteMember: Member;
    private _context;
    readonly type = "sfu";
    readonly onDisconnect: Event<void>;
    readonly onClose: Event<void>;
    closed: boolean;
    private _receivers;
    private _senders;
    private rtpCapabilities;
    constructor(_iceManager: IceManager, _api: SfuRestApiClient, channelId: string, localPersonId: string, remoteMember: Member, _context: SkyWayContext);
    addSenderConnection(publication: PublicationImpl<LocalVideoStream | LocalAudioStream>): Sender;
    removeSenderConnection(originPublicationId: string): void;
    startSubscribing(subscription: SubscriptionImpl): Promise<void>;
    stopSubscribing(subscription: Subscription): Promise<void>;
    stopPublishing(publication: Publication): Promise<void>;
    close(): void;
    getReceiver(subscriptionId: string): Receiver;
    getSender(forwardingId: string): Sender;
}
//# sourceMappingURL=index.d.ts.map