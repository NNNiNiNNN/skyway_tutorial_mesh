import { Event } from '@skyway-sdk/common';
import { LocalAudioStream, LocalVideoStream, Member, MemberImpl, MemberType, Publication, RemoteMember, SkyWayChannelImpl, SkyWayContext } from '@skyway-sdk/core';
import { SfuRestApiClient } from '@skyway-sdk/sfu-api-client';
import { SfuClientPlugin } from '.';
import { SFUConnection } from './connection';
import { Forwarding, ForwardingConfigure } from './forwarding';
export declare class SfuBotMember extends MemberImpl implements RemoteMember {
    readonly side = "remote";
    static readonly subtype = "sfu";
    readonly subtype = "sfu";
    readonly type: MemberType;
    private readonly _context;
    private _connections;
    readonly onForwardingStarted: Event<Forwarding>;
    readonly onForwardingStopped: Event<Forwarding>;
    readonly onForwardingStateChanged: Event<void>;
    private readonly _api;
    /**@internal */
    constructor(args: {
        channel: SkyWayChannelImpl;
        id: string;
        name?: string;
        metadata?: string | undefined;
        plugin: SfuClientPlugin;
        api: SfuRestApiClient;
        context: SkyWayContext;
    });
    /**@private */
    _getConnection(localPersonId: string): SFUConnection;
    /**@private */
    _getOrCreateConnection(localPersonId: string): SFUConnection;
    /**@private */
    private _createConnection;
    /**
     * @description {japanese} StreamのPublicationをForwardingする
     */
    startForwarding(publication: Publication<LocalVideoStream | LocalAudioStream>, configure?: ForwardingConfigure): Promise<Forwarding>;
    private listenStopForwardEvent;
    /**
     * @description {japanese} Forwardingを停止する
     */
    stopForwarding(forwardingId: string): Promise<void>;
    /**
     * @description {japanese} MemberがSfuBotかどうか識別する
     */
    static IsSfuBotMember: (member: Member) => member is SfuBotMember;
}
//# sourceMappingURL=member.d.ts.map