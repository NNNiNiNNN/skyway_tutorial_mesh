import { Order } from './order';
import { Event } from './utils/event';
import { Logger } from './utils/logger';
export declare type EventData = {
    event: string;
    payload: Record<string, unknown> | undefined;
};
export declare type SocketParams = {
    sessionEndpoint: string;
    channelId: string;
    channelName?: string;
    memberId: string;
    memberName?: string;
    token: string;
    connectivityCheckIntervalSec: number;
    logger: Logger;
};
export declare class Socket {
    private _sessionEndpoint;
    private readonly _channelId;
    private readonly _channelName?;
    private readonly _memberId;
    private readonly _memberName?;
    private _token;
    private _connectivityCheckIntervalSec;
    private _logger;
    private _isOpen;
    private _isDestroyed;
    private _reconnectCount;
    private _ws;
    readonly onOpened: Event<void>;
    readonly onEventReceived: Event<EventData>;
    readonly onConnectionFailed: Event<void>;
    constructor({ channelId, channelName, memberId, memberName, sessionEndpoint, token, connectivityCheckIntervalSec, logger, }: SocketParams);
    private _reconnect;
    private _connect;
    destroy(): void;
    send(order: Order): Promise<void>;
    private _messageHandler;
}
//# sourceMappingURL=socket.d.ts.map