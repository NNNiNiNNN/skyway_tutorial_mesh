import { HttpClient, LogLevel } from '@skyway-sdk/common';
export declare class SfuRestApiClient {
    private _token;
    readonly options: SfuApiOptions;
    readonly endpoint: string;
    readonly http: HttpClient;
    constructor(_token: string, _options?: Partial<SfuApiOptions>);
    updateToken(token: string): void;
    createBot({ appId, channelId, }: {
        appId: string;
        channelId: string;
    }): Promise<string>;
    deleteBot({ botId }: {
        botId: string;
    }): Promise<void>;
    startForwarding({ botId, publicationId, maxSubscribers, contentType, }: {
        botId: string;
        publicationId: string;
        maxSubscribers: number;
        contentType: ContentType;
    }): Promise<{
        forwardingId: string;
        routerRtpCapabilities: RtpCapabilities;
        transportOptions: TransportOptions;
    }>;
    createProducer({ botId, forwardingId, transportId, producerOptions, }: {
        botId: string;
        forwardingId: string;
        transportId: string;
        producerOptions: object;
    }): Promise<string>;
    createConsumer({ botId, forwardingId, rtpCapabilities, subscriptionId, }: {
        botId: string;
        forwardingId: string;
        rtpCapabilities: RtpCapabilities;
        subscriptionId: string;
    }): Promise<{
        consumerOptions: ConsumerOptions;
        transportOptions: TransportOptions;
        producerId: string;
    }>;
    connect({ botId, forwardingId, transportId, dtlsParameters, }: {
        botId: string;
        forwardingId: string;
        transportId: string;
        dtlsParameters: object;
    }): Promise<{
        transportId: string;
    }>;
    stopForwarding({ botId, forwardingId, }: {
        botId: string;
        forwardingId: string;
    }): Promise<void>;
    getCapabilities({ botId, forwardingId, }: {
        botId: string;
        forwardingId: string;
    }): Promise<RtpCapabilities>;
}
declare type ContentType = 'video' | 'audio';
declare type RtpCapabilities = any;
declare type TransportOptions = any;
declare type ConsumerOptions = any;
export interface SfuApiOptions {
    domain: string;
    secure: boolean;
    version: number;
    logLevel: LogLevel;
}
export {};
//# sourceMappingURL=api.d.ts.map