import { Event } from '@skyway-sdk/common';
import model, { Channel, Member, MemberType, Publication } from '@skyway-sdk/model';
export interface SkyWayApi {
    onClose: Event<void>;
    createChannel(appId: string, channelInit: ChannelInit): Promise<model.Channel>;
    getChannel(appId: string, channelQuery: ChannelQuery): Promise<model.Channel>;
    findOrCreateChannel(appId: string, channelQuery: ChannelInit): Promise<model.Channel>;
    deleteChannel(appId: string, id: Channel['id']): Promise<void>;
    updateChannelMetadata(appId: string, id: Channel['id'], metadata: string): Promise<void>;
    join(appId: string, channelId: Channel['id'], memberInit: MemberInit): Promise<model.Member>;
    leave(appId: string, channelId: Channel['id'], memberId: Member['id']): Promise<void>;
    updateMemberTtl(appId: string, channelId: Channel['id'], memberId: Member['id'], ttlSec: number): Promise<void>;
    updateMemberMetadata(appId: string, channelId: Channel['id'], memberId: Member['id'], metadata: string): Promise<void>;
    publish(appId: string, init: PublicationInit): Promise<model.Publication>;
    unpublish(appId: string, channelId: Channel['id'], publicationId: Publication['id']): Promise<void>;
    updatePublicationMetadata(appId: string, channelId: Channel['id'], publicationId: Publication['id'], metadata: string): Promise<void>;
    subscribe(appId: string, init: SubscriptionInit): Promise<model.Subscription>;
    unsubscribe(appId: string, channelId: string, subscriptionId: string): Promise<void>;
    updateAuthToken(token: string): void;
    close(): void;
}
export interface ChannelInit {
    name?: Channel['name'];
    metadata?: string;
}
export interface ChannelQuery {
    name?: Channel['name'];
    id?: Channel['id'];
}
export interface MemberInit {
    name?: Member['name'];
    type: MemberType;
    subtype: string;
    metadata?: string;
    ttlSec?: number;
}
export interface PublicationInit {
    channel: Channel['id'];
    publisher: Member['id'];
    origin?: Publication['id'];
    metadata?: string;
    contentType: model.ContentType;
    codecCapabilities?: model.Codec[];
    encodings?: model.Encoding[];
}
export interface SubscriptionInit {
    channel: {
        id: Channel['id'];
    };
    subscriber: {
        id: Member['id'];
    };
    publication: {
        id: Publication['id'];
        publisherId: Publication['publisherId'];
        contentType: Publication['contentType'];
    };
}
//# sourceMappingURL=api.d.ts.map