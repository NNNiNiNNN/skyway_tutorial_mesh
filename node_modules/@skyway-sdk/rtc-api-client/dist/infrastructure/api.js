"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SkyWayApiImpl = void 0;
const common_1 = require("@skyway-sdk/common");
const log = new common_1.Logger('packages/rtc-api-client/src/infrastructure/api.ts');
class SkyWayApiImpl {
    constructor(_client) {
        this._client = _client;
        this.closed = false;
        this.onClose = new common_1.Event();
        _client.onClose.once(() => {
            this.close();
        });
    }
    updateAuthToken(token) {
        this._client.updateToken(token);
    }
    close() {
        if (this.closed) {
            return;
        }
        this.closed = true;
        log.debug('closed');
        this._client.close();
        this.onClose.emit();
        this.onClose.removeAllListeners();
    }
    createChannel(appId, channelInit) {
        return __awaiter(this, void 0, void 0, function* () {
            const { id } = yield this._client
                .createChannel({
                appId,
                name: channelInit.name,
                metadata: channelInit.metadata,
            })
                .catch((e) => {
                const { payload } = e;
                switch (payload === null || payload === void 0 ? void 0 : payload.code) {
                    case 4030:
                        throw new common_1.SkyWayError({
                            type: 'insufficientPermissions',
                            message: 'Insufficient permission for creating a channel',
                        });
                    default:
                        throw new common_1.SkyWayError({
                            type: 'backendError',
                            message: 'createChannel failed',
                            payload: e,
                        });
                }
            });
            const res = yield this.getChannel(appId, { id });
            return res;
        });
    }
    getChannel(appId, { name, id }) {
        return __awaiter(this, void 0, void 0, function* () {
            if (id) {
                return yield this._client.getChannel({ appId, id }).catch((e) => {
                    const { payload } = e;
                    switch (payload === null || payload === void 0 ? void 0 : payload.code) {
                        case 4030:
                            throw new common_1.SkyWayError({
                                type: 'insufficientPermissions',
                                message: 'Insufficient permission for finding a channel',
                            });
                        default:
                            throw new common_1.SkyWayError({
                                type: 'backendError',
                                message: 'getChannel failed',
                                payload: e,
                            });
                    }
                });
            }
            if (name) {
                return yield this._client.getChannelByName({ appId, name }).catch((e) => {
                    const { payload } = e;
                    switch (payload === null || payload === void 0 ? void 0 : payload.code) {
                        case 4030:
                            throw new common_1.SkyWayError({
                                type: 'insufficientPermissions',
                                message: 'Insufficient permission for finding a channel',
                            });
                        default:
                            throw new common_1.SkyWayError({
                                type: 'backendError',
                                message: 'getChannel by name failed',
                                payload: e,
                            });
                    }
                });
            }
            throw new common_1.SkyWayError({
                type: 'invalidParameter',
                message: 'channel query must has id or name',
            });
        });
    }
    findOrCreateChannel(appId, query) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._client.findOrCreateChannel(Object.assign(Object.assign({}, query), { appId })).catch((e) => {
                const { payload } = e;
                switch (payload === null || payload === void 0 ? void 0 : payload.code) {
                    case 4030:
                        throw new common_1.SkyWayError({
                            type: 'insufficientPermissions',
                            message: 'Insufficient permission for finding or creating a channel',
                        });
                    default:
                        throw new common_1.SkyWayError({
                            type: 'backendError',
                            message: 'findOrCreateChannel failed',
                            payload: e,
                        });
                }
            });
        });
    }
    deleteChannel(appId, id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._client.deleteChannel({ appId, id }).catch((e) => {
                const { payload } = e;
                switch (payload === null || payload === void 0 ? void 0 : payload.code) {
                    case 4030:
                        throw new common_1.SkyWayError({
                            type: 'insufficientPermissions',
                            message: 'Insufficient permission for finding or delete a channel',
                        });
                    default:
                        throw new common_1.SkyWayError({
                            type: 'backendError',
                            message: 'deleteChannel failed',
                            payload: e,
                        });
                }
            });
        });
    }
    updateChannelMetadata(appId, id, metadata) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._client
                .updateChannelMetadata({ appId, id, metadata })
                .catch((e) => {
                const { payload } = e;
                switch (payload === null || payload === void 0 ? void 0 : payload.code) {
                    case 4030:
                        throw new common_1.SkyWayError({
                            type: 'insufficientPermissions',
                            message: "Insufficient permission for finding or update channel's metadata",
                        });
                    default:
                        throw new common_1.SkyWayError({
                            type: 'backendError',
                            message: 'updateChannelMetadata failed',
                            payload: e,
                        });
                }
            });
        });
    }
    join(appId, channelId, memberInit) {
        return __awaiter(this, void 0, void 0, function* () {
            const { memberId } = yield this._client
                .addMember({
                appId,
                channelId,
                name: memberInit.name,
                metadata: memberInit.metadata,
                ttlSec: memberInit.ttlSec,
                type: memberInit.type,
                subtype: memberInit.subtype,
            })
                .catch((e) => {
                const { payload, message, type } = e;
                switch (payload === null || payload === void 0 ? void 0 : payload.code) {
                    case 4030:
                        throw new common_1.SkyWayError({
                            type: 'insufficientPermissions',
                            message: 'Insufficient permission for join channel',
                            payload: { memberInit, appId, channelId },
                        });
                    default:
                        throw new common_1.SkyWayError({
                            type,
                            message: 'join channel failed',
                            payload: {
                                message,
                                payload,
                                memberInit,
                                channelId,
                                appId,
                            },
                        });
                }
            });
            const member = {
                id: memberId,
                name: memberInit.name,
                type: memberInit.type,
                subtype: memberInit.subtype,
                metadata: memberInit.metadata,
            };
            return member;
        });
    }
    updateMemberTtl(appId, channelId, memberId, ttlSec) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._client.updateMemberTtl({
                appId,
                channelId,
                memberId,
                ttlSec,
            });
        });
    }
    updateMemberMetadata(appId, channelId, memberId, metadata) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._client
                .updateMemberMetadata({
                appId,
                channelId,
                memberId,
                metadata,
            })
                .catch((e) => {
                const { payload } = e;
                switch (payload === null || payload === void 0 ? void 0 : payload.code) {
                    case 4030:
                        throw new common_1.SkyWayError({
                            type: 'insufficientPermissions',
                            message: 'Insufficient permission for updateMemberMetadata',
                        });
                    default:
                        throw new common_1.SkyWayError({
                            type: 'backendError',
                            message: 'updateMemberMetadata failed',
                            payload: e,
                        });
                }
            });
        });
    }
    leave(appId, channelId, memberId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._client
                .leaveChannel({
                channelId,
                id: memberId,
                appId,
            })
                .catch((e) => {
                const { payload } = e;
                switch (payload === null || payload === void 0 ? void 0 : payload.code) {
                    case 4030:
                        throw new common_1.SkyWayError({
                            type: 'insufficientPermissions',
                            message: 'Insufficient permission for leaveChannel',
                        });
                    default:
                        throw new common_1.SkyWayError({
                            type: 'backendError',
                            message: 'leaveChannel failed',
                            payload: e,
                        });
                }
            });
        });
    }
    publish(appId, init) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const { publicationId } = yield this._client
                .publishStream({
                channelId: init.channel,
                publisherId: init.publisher,
                contentType: init.contentType,
                metadata: init.metadata,
                origin: init.origin,
                codecCapabilities: init.codecCapabilities,
                encodings: init.encodings,
                appId,
            })
                .catch((e) => {
                const { payload } = e;
                switch (payload === null || payload === void 0 ? void 0 : payload.code) {
                    case 4030:
                        throw new common_1.SkyWayError({
                            type: 'insufficientPermissions',
                            message: 'Insufficient permission for publishStream',
                        });
                    default:
                        throw new common_1.SkyWayError({
                            type: 'backendError',
                            message: 'publishStream failed',
                            payload: e,
                        });
                }
            });
            const publication = {
                id: publicationId,
                channelId: init.channel,
                publisherId: init.publisher,
                origin: init.origin,
                contentType: init.contentType,
                metadata: init.metadata,
                codecCapabilities: (_a = init.codecCapabilities) !== null && _a !== void 0 ? _a : [],
                encodings: (_b = init.encodings) !== null && _b !== void 0 ? _b : [],
            };
            return publication;
        });
    }
    updatePublicationMetadata(appId, channelId, publicationId, metadata) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._client
                .updatePublicationMetadata({
                channelId,
                publicationId,
                metadata,
                appId,
            })
                .catch((e) => {
                const { payload } = e;
                switch (payload === null || payload === void 0 ? void 0 : payload.code) {
                    case 4030:
                        throw new common_1.SkyWayError({
                            type: 'insufficientPermissions',
                            message: 'Insufficient permission for updatePublicationMetadata',
                        });
                    default:
                        throw new common_1.SkyWayError({
                            type: 'backendError',
                            message: 'updatePublicationMetadata failed',
                            payload: e,
                        });
                }
            });
        });
    }
    unpublish(appId, channelId, publicationId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._client
                .unpublishStream({ channelId, publicationId, appId })
                .catch((e) => {
                const { payload } = e;
                switch (payload === null || payload === void 0 ? void 0 : payload.code) {
                    case 4030:
                        throw new common_1.SkyWayError({
                            type: 'insufficientPermissions',
                            message: 'Insufficient permission for unpublishStream',
                        });
                    default:
                        throw new common_1.SkyWayError({
                            type: 'backendError',
                            message: 'unpublishStream failed',
                            payload: e,
                        });
                }
            });
        });
    }
    subscribe(appId, init) {
        return __awaiter(this, void 0, void 0, function* () {
            const { subscriptionId } = yield this._client
                .subscribeStream({
                channelId: init.channel.id,
                subscriberId: init.subscriber.id,
                publicationId: init.publication.id,
                appId,
            })
                .catch((e) => {
                const { payload } = e;
                switch (payload === null || payload === void 0 ? void 0 : payload.code) {
                    case 4030:
                        throw new common_1.SkyWayError({
                            type: 'insufficientPermissions',
                            message: 'Insufficient permission for subscribeStream',
                        });
                    default:
                        throw new common_1.SkyWayError({
                            type: 'backendError',
                            message: 'subscribeStream failed',
                            payload: e,
                        });
                }
            });
            const subscription = {
                id: subscriptionId,
                publicationId: init.publication.id,
                channelId: init.channel.id,
                publisherId: init.publication.publisherId,
                subscriberId: init.subscriber.id,
                contentType: init.publication.contentType,
            };
            return subscription;
        });
    }
    unsubscribe(appId, channelId, subscriptionId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._client
                .unsubscribeStream({
                appId,
                channelId,
                subscriptionId,
            })
                .catch((e) => {
                const { payload } = e;
                switch (payload === null || payload === void 0 ? void 0 : payload.code) {
                    case 4030:
                        throw new common_1.SkyWayError({
                            type: 'insufficientPermissions',
                            message: 'Insufficient permission for unsubscribeStream',
                        });
                    default:
                        throw new common_1.SkyWayError({
                            type: 'backendError',
                            message: 'unsubscribeStream failed',
                            payload: e,
                        });
                }
            });
        });
    }
}
exports.SkyWayApiImpl = SkyWayApiImpl;
//# sourceMappingURL=api.js.map